# coding: utf-8

"""
    Cerebral API

    The Wdata Preparation API allow users to import data sets from their source system, tag, organize, manipulate, share, export, and query against the data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: scoutteam@workiva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PivotViewManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_pivot_view_using_post(self, **kwargs):  # noqa: E501
        """Create a new pivot view  # noqa: E501

        Creates a view from the provided information. Currently, persists the provided `additionalMetadata` field, which can store an arbitrary JSON definition of a pivot table view. This pivot table must be associated with a query, and can optionally be associated with a query result. When a query is deleted, its associated views are also deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_pivot_view_using_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PivotViewDto pivot_view_dto: The representation of the view to create
        :return: BaseResponseOfPivotViewDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_pivot_view_using_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_pivot_view_using_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_pivot_view_using_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new pivot view  # noqa: E501

        Creates a view from the provided information. Currently, persists the provided `additionalMetadata` field, which can store an arbitrary JSON definition of a pivot table view. This pivot table must be associated with a query, and can optionally be associated with a query result. When a query is deleted, its associated views are also deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_pivot_view_using_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PivotViewDto pivot_view_dto: The representation of the view to create
        :return: BaseResponseOfPivotViewDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pivot_view_dto']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pivot_view_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pivot_view_dto' in params:
            body_params = params['pivot_view_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pivotview', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseOfPivotViewDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pivot_view_using_delete(self, pivot_view_id, **kwargs):  # noqa: E501
        """Delete a single pivot view  # noqa: E501

        Deletes a view that matches the provided ID.  This is an administrative method and should be assumed a hard-delete, given no capability to restore a deleted view is available.  A no-op if no such view exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pivot_view_using_delete(pivot_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pivot_view_id: The unique identifier of the pivot view (required)
        :return: BaseResponseOfstring
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pivot_view_using_delete_with_http_info(pivot_view_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pivot_view_using_delete_with_http_info(pivot_view_id, **kwargs)  # noqa: E501
            return data

    def delete_pivot_view_using_delete_with_http_info(self, pivot_view_id, **kwargs):  # noqa: E501
        """Delete a single pivot view  # noqa: E501

        Deletes a view that matches the provided ID.  This is an administrative method and should be assumed a hard-delete, given no capability to restore a deleted view is available.  A no-op if no such view exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pivot_view_using_delete_with_http_info(pivot_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pivot_view_id: The unique identifier of the pivot view (required)
        :return: BaseResponseOfstring
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pivot_view_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pivot_view_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pivot_view_id' is set
        if self.api_client.client_side_validation and ('pivot_view_id' not in params or
                                                       params['pivot_view_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pivot_view_id` when calling `delete_pivot_view_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pivot_view_id' in params:
            path_params['pivotViewId'] = params['pivot_view_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pivotview/{pivotViewId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseOfstring',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_pivot_view_token_using_get(self, pivot_view_id, **kwargs):  # noqa: E501
        """This endpoint is deprecated. It not longer functions as intended, as pivotingquery results is now handled by cross tab queries. This endpoint will be removedon September 1, 2020.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_pivot_view_token_using_get(pivot_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pivot_view_id: The unique identifier of the pivot view (required)
        :return: BaseResponseOfTokenDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_pivot_view_token_using_get_with_http_info(pivot_view_id, **kwargs)  # noqa: E501
        else:
            (data) = self.download_pivot_view_token_using_get_with_http_info(pivot_view_id, **kwargs)  # noqa: E501
            return data

    def download_pivot_view_token_using_get_with_http_info(self, pivot_view_id, **kwargs):  # noqa: E501
        """This endpoint is deprecated. It not longer functions as intended, as pivotingquery results is now handled by cross tab queries. This endpoint will be removedon September 1, 2020.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_pivot_view_token_using_get_with_http_info(pivot_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pivot_view_id: The unique identifier of the pivot view (required)
        :return: BaseResponseOfTokenDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pivot_view_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_pivot_view_token_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pivot_view_id' is set
        if self.api_client.client_side_validation and ('pivot_view_id' not in params or
                                                       params['pivot_view_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pivot_view_id` when calling `download_pivot_view_token_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pivot_view_id' in params:
            path_params['pivotViewId'] = params['pivot_view_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pivotview/{pivotViewId}/token', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseOfTokenDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_pivot_view_using_get(self, pivot_view_id, **kwargs):  # noqa: E501
        """This endpoint is deprecated. It not longer functions as intended, as pivotingquery results is now handled by cross tab queries. This endpoint will be removedon September 1, 2020.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_pivot_view_using_get(pivot_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pivot_view_id: The unique identifier of the pivot view (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_pivot_view_using_get_with_http_info(pivot_view_id, **kwargs)  # noqa: E501
        else:
            (data) = self.download_pivot_view_using_get_with_http_info(pivot_view_id, **kwargs)  # noqa: E501
            return data

    def download_pivot_view_using_get_with_http_info(self, pivot_view_id, **kwargs):  # noqa: E501
        """This endpoint is deprecated. It not longer functions as intended, as pivotingquery results is now handled by cross tab queries. This endpoint will be removedon September 1, 2020.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_pivot_view_using_get_with_http_info(pivot_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pivot_view_id: The unique identifier of the pivot view (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pivot_view_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_pivot_view_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pivot_view_id' is set
        if self.api_client.client_side_validation and ('pivot_view_id' not in params or
                                                       params['pivot_view_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pivot_view_id` when calling `download_pivot_view_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pivot_view_id' in params:
            path_params['pivotViewId'] = params['pivot_view_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pivotview/{pivotViewId}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pivot_view_using_get(self, pivot_view_id, **kwargs):  # noqa: E501
        """Retrieve a single pivot view  # noqa: E501

        Returns a view with the provided ID, or a 404 if no view matches the ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pivot_view_using_get(pivot_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pivot_view_id: The unique identifier of the pivot view (required)
        :return: BaseResponseOfPivotViewDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pivot_view_using_get_with_http_info(pivot_view_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pivot_view_using_get_with_http_info(pivot_view_id, **kwargs)  # noqa: E501
            return data

    def get_pivot_view_using_get_with_http_info(self, pivot_view_id, **kwargs):  # noqa: E501
        """Retrieve a single pivot view  # noqa: E501

        Returns a view with the provided ID, or a 404 if no view matches the ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pivot_view_using_get_with_http_info(pivot_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pivot_view_id: The unique identifier of the pivot view (required)
        :return: BaseResponseOfPivotViewDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pivot_view_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pivot_view_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pivot_view_id' is set
        if self.api_client.client_side_validation and ('pivot_view_id' not in params or
                                                       params['pivot_view_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pivot_view_id` when calling `get_pivot_view_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pivot_view_id' in params:
            path_params['pivotViewId'] = params['pivot_view_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pivotview/{pivotViewId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseOfPivotViewDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_pivot_views_using_get(self, query_id, **kwargs):  # noqa: E501
        """Retrieve a list of pivot views  # noqa: E501

        Returns a paged list of views in the workspace of the request. If queryId is provided, the results are limited to only views associated with the query ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pivot_views_using_get(query_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query_id: The unique query identifier to filter the views (required)
        :param int limit: The number of views to return, from 1 to 1000; by default, 1000
        :param str cursor: A paging cursor; if included, `limit` is ignored
        :param int offset: The item to start with on the page, greater than or equal to 0; by default, 0
        :return: PagedResponseOfPivotViewDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_pivot_views_using_get_with_http_info(query_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_pivot_views_using_get_with_http_info(query_id, **kwargs)  # noqa: E501
            return data

    def list_pivot_views_using_get_with_http_info(self, query_id, **kwargs):  # noqa: E501
        """Retrieve a list of pivot views  # noqa: E501

        Returns a paged list of views in the workspace of the request. If queryId is provided, the results are limited to only views associated with the query ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pivot_views_using_get_with_http_info(query_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query_id: The unique query identifier to filter the views (required)
        :param int limit: The number of views to return, from 1 to 1000; by default, 1000
        :param str cursor: A paging cursor; if included, `limit` is ignored
        :param int offset: The item to start with on the page, greater than or equal to 0; by default, 0
        :return: PagedResponseOfPivotViewDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query_id', 'limit', 'cursor', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_pivot_views_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query_id' is set
        if self.api_client.client_side_validation and ('query_id' not in params or
                                                       params['query_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `query_id` when calling `list_pivot_views_using_get`")  # noqa: E501

        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `list_pivot_views_using_get`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `list_pivot_views_using_get`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query_id' in params:
            query_params.append(('queryId', params['query_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pivotview', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedResponseOfPivotViewDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_pivot_view_using_put(self, pivot_view_id, **kwargs):  # noqa: E501
        """Update a single pivot view  # noqa: E501

        Updates the view that matches the provided ID with the details provided in the body. The associated query can't be updated, so providing the query ID has no effect.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pivot_view_using_put(pivot_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pivot_view_id: The unique identifier of the pivot view (required)
        :param PivotViewDto pivot_view_dto: The representation of the pivot view to create
        :return: BaseResponseOfPivotViewDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_pivot_view_using_put_with_http_info(pivot_view_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_pivot_view_using_put_with_http_info(pivot_view_id, **kwargs)  # noqa: E501
            return data

    def update_pivot_view_using_put_with_http_info(self, pivot_view_id, **kwargs):  # noqa: E501
        """Update a single pivot view  # noqa: E501

        Updates the view that matches the provided ID with the details provided in the body. The associated query can't be updated, so providing the query ID has no effect.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pivot_view_using_put_with_http_info(pivot_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pivot_view_id: The unique identifier of the pivot view (required)
        :param PivotViewDto pivot_view_dto: The representation of the pivot view to create
        :return: BaseResponseOfPivotViewDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pivot_view_id', 'pivot_view_dto']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pivot_view_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pivot_view_id' is set
        if self.api_client.client_side_validation and ('pivot_view_id' not in params or
                                                       params['pivot_view_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pivot_view_id` when calling `update_pivot_view_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pivot_view_id' in params:
            path_params['pivotViewId'] = params['pivot_view_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pivot_view_dto' in params:
            body_params = params['pivot_view_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pivotview/{pivotViewId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseOfPivotViewDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
