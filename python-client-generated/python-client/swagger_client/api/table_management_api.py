# coding: utf-8

"""
    Cerebral API

    The Wdata Preparation API allow users to import data sets from their source system, tag, organize, manipulate, share, export, and query against the data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: scoutteam@workiva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TableManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_table_using_post(self, **kwargs):  # noqa: E501
        """Create a new table  # noqa: E501

        Creates a table in the database with the specified schema. For type, specify either a dimension or data table. In the interface, data tables appear as fact tables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_table_using_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableDto body: The representation of the table to create
        :return: BaseResponseOfTableDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_table_using_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_table_using_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_table_using_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new table  # noqa: E501

        Creates a table in the database with the specified schema. For type, specify either a dimension or data table. In the interface, data tables appear as fact tables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_table_using_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableDto body: The representation of the table to create
        :return: BaseResponseOfTableDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_table_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/table', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseOfTableDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_table_using_delete(self, table_id, **kwargs):  # noqa: E501
        """Delete a single table  # noqa: E501

        Soft-deletes the table with the provided ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_table_using_delete(table_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str table_id: The unique identifier of the table (required)
        :return: BaseResponseOfstring
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_table_using_delete_with_http_info(table_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_table_using_delete_with_http_info(table_id, **kwargs)  # noqa: E501
            return data

    def delete_table_using_delete_with_http_info(self, table_id, **kwargs):  # noqa: E501
        """Delete a single table  # noqa: E501

        Soft-deletes the table with the provided ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_table_using_delete_with_http_info(table_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str table_id: The unique identifier of the table (required)
        :return: BaseResponseOfstring
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['table_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_table_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'table_id' is set
        if self.api_client.client_side_validation and ('table_id' not in params or
                                                       params['table_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `table_id` when calling `delete_table_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'table_id' in params:
            path_params['tableId'] = params['table_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/table/{tableId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseOfstring',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dependents_using_get(self, table_id, **kwargs):  # noqa: E501
        """Retrieve a list of dependents  # noqa: E501

        Returns a list of all queries that use the table with provided ID as a datasource. If a shared table, this may include queries outside of the current OAuth context.  Permission is checked only for the table ID provided, _not_ on the returned list of queries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dependents_using_get(table_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str table_id: The unique identifier of the table (required)
        :param int limit: The number of folders to return, from 1 to 1000; by default, 1000
        :param str cursor: A paging cursor; if included, `limit` is ignored
        :param int offset: The item to start with on the page, greater than or equal to 0; by default, 0
        :return: PagedResponseOfQueryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dependents_using_get_with_http_info(table_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dependents_using_get_with_http_info(table_id, **kwargs)  # noqa: E501
            return data

    def get_dependents_using_get_with_http_info(self, table_id, **kwargs):  # noqa: E501
        """Retrieve a list of dependents  # noqa: E501

        Returns a list of all queries that use the table with provided ID as a datasource. If a shared table, this may include queries outside of the current OAuth context.  Permission is checked only for the table ID provided, _not_ on the returned list of queries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dependents_using_get_with_http_info(table_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str table_id: The unique identifier of the table (required)
        :param int limit: The number of folders to return, from 1 to 1000; by default, 1000
        :param str cursor: A paging cursor; if included, `limit` is ignored
        :param int offset: The item to start with on the page, greater than or equal to 0; by default, 0
        :return: PagedResponseOfQueryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['table_id', 'limit', 'cursor', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dependents_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'table_id' is set
        if self.api_client.client_side_validation and ('table_id' not in params or
                                                       params['table_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `table_id` when calling `get_dependents_using_get`")  # noqa: E501

        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_dependents_using_get`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_dependents_using_get`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'table_id' in params:
            path_params['tableId'] = params['table_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/table/{tableId}/dependents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedResponseOfQueryDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_import_info_using_get(self, table_id, **kwargs):  # noqa: E501
        """Retrieve import information  # noqa: E501

        Returns information around imported files for a table.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_import_info_using_get(table_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str table_id: The unique identifier of the table (required)
        :return: BaseResponseOfImportInfoDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_import_info_using_get_with_http_info(table_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_import_info_using_get_with_http_info(table_id, **kwargs)  # noqa: E501
            return data

    def get_import_info_using_get_with_http_info(self, table_id, **kwargs):  # noqa: E501
        """Retrieve import information  # noqa: E501

        Returns information around imported files for a table.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_import_info_using_get_with_http_info(table_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str table_id: The unique identifier of the table (required)
        :return: BaseResponseOfImportInfoDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['table_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_import_info_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'table_id' is set
        if self.api_client.client_side_validation and ('table_id' not in params or
                                                       params['table_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `table_id` when calling `get_import_info_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'table_id' in params:
            path_params['tableId'] = params['table_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/table/{tableId}/importInfo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseOfImportInfoDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_table_using_get(self, table_id, **kwargs):  # noqa: E501
        """Retrieve a single table  # noqa: E501

        Returns a table with the provided ID, or a 404 if no such table is found.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_table_using_get(table_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str table_id: The unique identifier of the table (required)
        :return: BaseResponseOfTableDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_table_using_get_with_http_info(table_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_table_using_get_with_http_info(table_id, **kwargs)  # noqa: E501
            return data

    def get_table_using_get_with_http_info(self, table_id, **kwargs):  # noqa: E501
        """Retrieve a single table  # noqa: E501

        Returns a table with the provided ID, or a 404 if no such table is found.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_table_using_get_with_http_info(table_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str table_id: The unique identifier of the table (required)
        :return: BaseResponseOfTableDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['table_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_table_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'table_id' is set
        if self.api_client.client_side_validation and ('table_id' not in params or
                                                       params['table_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `table_id` when calling `get_table_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'table_id' in params:
            path_params['tableId'] = params['table_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/table/{tableId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseOfTableDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tables_using_get(self, **kwargs):  # noqa: E501
        """Retrieve a list of tables  # noqa: E501

        Returns all tables available in the workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tables_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_shared: If true, returns all tables shared with the workspace associated with the request. If false, returns only tables the workspace owns.
        :param int limit: the number of folders to return, from 1 to 1000; by default, 1000
        :param str cursor: a paging cursor; if included the limit is ignored
        :param int offset: The item to start with on the page, must be greater than or equal to 0, will default to 0
        :return: PagedResponseOfTableDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tables_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_tables_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_tables_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a list of tables  # noqa: E501

        Returns all tables available in the workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tables_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_shared: If true, returns all tables shared with the workspace associated with the request. If false, returns only tables the workspace owns.
        :param int limit: the number of folders to return, from 1 to 1000; by default, 1000
        :param str cursor: a paging cursor; if included the limit is ignored
        :param int offset: The item to start with on the page, must be greater than or equal to 0, will default to 0
        :return: PagedResponseOfTableDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['include_shared', 'limit', 'cursor', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tables_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_tables_using_get`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_tables_using_get`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_shared' in params:
            query_params.append(('includeShared', params['include_shared']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cursor' in params:
            body_params = params['cursor']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/table', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedResponseOfTableDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_file_using_post(self, table_id, **kwargs):  # noqa: E501
        """Import a single file  # noqa: E501

        Imports the provided file into the associated table, and immediately returns a file meta object with an ID that can be used to poll the file controller for status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_file_using_post(table_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str table_id: The unique identifier of the table (required)
        :param ImportDto import_dto: The representation of the table to import
        :return: BaseResponseOfFileMetaDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.import_file_using_post_with_http_info(table_id, **kwargs)  # noqa: E501
        else:
            (data) = self.import_file_using_post_with_http_info(table_id, **kwargs)  # noqa: E501
            return data

    def import_file_using_post_with_http_info(self, table_id, **kwargs):  # noqa: E501
        """Import a single file  # noqa: E501

        Imports the provided file into the associated table, and immediately returns a file meta object with an ID that can be used to poll the file controller for status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_file_using_post_with_http_info(table_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str table_id: The unique identifier of the table (required)
        :param ImportDto import_dto: The representation of the table to import
        :return: BaseResponseOfFileMetaDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['table_id', 'import_dto']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_file_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'table_id' is set
        if self.api_client.client_side_validation and ('table_id' not in params or
                                                       params['table_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `table_id` when calling `import_file_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'table_id' in params:
            path_params['tableId'] = params['table_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'import_dto' in params:
            body_params = params['import_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/table/{tableId}/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseOfFileMetaDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_from_spreadsheets_using_post(self, table_id, **kwargs):  # noqa: E501
        """Import from spreadsheets  # noqa: E501

        Imports spreadsheet data and immediately returns a file meta result. This DTO has an ID, which can be used to poll on status via the file controller.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_from_spreadsheets_using_post(table_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str table_id: The unique identifier of the table (required)
        :param ImportFromSpreadsheetDto import_from_spreadsheet_dto: The representation of the table to update
        :return: BaseResponseOfFileMetaDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.import_from_spreadsheets_using_post_with_http_info(table_id, **kwargs)  # noqa: E501
        else:
            (data) = self.import_from_spreadsheets_using_post_with_http_info(table_id, **kwargs)  # noqa: E501
            return data

    def import_from_spreadsheets_using_post_with_http_info(self, table_id, **kwargs):  # noqa: E501
        """Import from spreadsheets  # noqa: E501

        Imports spreadsheet data and immediately returns a file meta result. This DTO has an ID, which can be used to poll on status via the file controller.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_from_spreadsheets_using_post_with_http_info(table_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str table_id: The unique identifier of the table (required)
        :param ImportFromSpreadsheetDto import_from_spreadsheet_dto: The representation of the table to update
        :return: BaseResponseOfFileMetaDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['table_id', 'import_from_spreadsheet_dto']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_from_spreadsheets_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'table_id' is set
        if self.api_client.client_side_validation and ('table_id' not in params or
                                                       params['table_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `table_id` when calling `import_from_spreadsheets_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'table_id' in params:
            path_params['tableId'] = params['table_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'import_from_spreadsheet_dto' in params:
            body_params = params['import_from_spreadsheet_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/table/{tableId}/spreadsheet/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseOfFileMetaDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unimport_file_using_delete(self, table_id, file_id, **kwargs):  # noqa: E501
        """Unimport a single file  # noqa: E501

        Unimports the provided file from the provided table. Returns a 409 if the file is not in an imported state, or a 404 if the file can't be found.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unimport_file_using_delete(table_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str table_id: The unique identifier of the table (required)
        :param str file_id: The unique identifier of the file (required)
        :param str force: If true, unimports and deletes file from the table
        :return: BaseResponseOfFileMetaDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unimport_file_using_delete_with_http_info(table_id, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unimport_file_using_delete_with_http_info(table_id, file_id, **kwargs)  # noqa: E501
            return data

    def unimport_file_using_delete_with_http_info(self, table_id, file_id, **kwargs):  # noqa: E501
        """Unimport a single file  # noqa: E501

        Unimports the provided file from the provided table. Returns a 409 if the file is not in an imported state, or a 404 if the file can't be found.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unimport_file_using_delete_with_http_info(table_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str table_id: The unique identifier of the table (required)
        :param str file_id: The unique identifier of the file (required)
        :param str force: If true, unimports and deletes file from the table
        :return: BaseResponseOfFileMetaDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['table_id', 'file_id', 'force']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unimport_file_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'table_id' is set
        if self.api_client.client_side_validation and ('table_id' not in params or
                                                       params['table_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `table_id` when calling `unimport_file_using_delete`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if self.api_client.client_side_validation and ('file_id' not in params or
                                                       params['file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file_id` when calling `unimport_file_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'table_id' in params:
            path_params['tableId'] = params['table_id']  # noqa: E501
        if 'file_id' in params:
            path_params['fileId'] = params['file_id']  # noqa: E501

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/table/{tableId}/import/{fileId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseOfFileMetaDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_table_using_put(self, table_id, **kwargs):  # noqa: E501
        """Update a single table  # noqa: E501

        Updates an existing table with the provided information. Include all user-defined table columns with the request. For type, specify either a dimension or data table. In the interface, data tables appear as fact tables.  * If the table has no imported data, user-defined columns not included with the request are deleted, and columns are sorted according to their order in the request.  * If the table has imported data, any columns with names not already in the table are considered new. This equality check is case-insensitive. Any new columns appear after other user-defined columns, but before any meta columns, which start with `_`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_table_using_put(table_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str table_id: The unique identifier of the table (required)
        :param TableDto table_dto: The representation of the table to update
        :return: BaseResponseOfTableDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_table_using_put_with_http_info(table_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_table_using_put_with_http_info(table_id, **kwargs)  # noqa: E501
            return data

    def update_table_using_put_with_http_info(self, table_id, **kwargs):  # noqa: E501
        """Update a single table  # noqa: E501

        Updates an existing table with the provided information. Include all user-defined table columns with the request. For type, specify either a dimension or data table. In the interface, data tables appear as fact tables.  * If the table has no imported data, user-defined columns not included with the request are deleted, and columns are sorted according to their order in the request.  * If the table has imported data, any columns with names not already in the table are considered new. This equality check is case-insensitive. Any new columns appear after other user-defined columns, but before any meta columns, which start with `_`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_table_using_put_with_http_info(table_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str table_id: The unique identifier of the table (required)
        :param TableDto table_dto: The representation of the table to update
        :return: BaseResponseOfTableDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['table_id', 'table_dto']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_table_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'table_id' is set
        if self.api_client.client_side_validation and ('table_id' not in params or
                                                       params['table_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `table_id` when calling `update_table_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'table_id' in params:
            path_params['tableId'] = params['table_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'table_dto' in params:
            body_params = params['table_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/table/{tableId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseOfTableDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
