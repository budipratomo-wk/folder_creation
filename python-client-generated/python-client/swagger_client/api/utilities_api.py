# coding: utf-8

"""
    Cerebral API

    The Wdata Preparation API allow users to import data sets from their source system, tag, organize, manipulate, share, export, and query against the data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: scoutteam@workiva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UtilitiesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def parse_date_using_post(self, **kwargs):  # noqa: E501
        """Parse a date  # noqa: E501

        Provides a simple endpoint to check whether a given date candidate parses with the provided format string.  Both the date candidate and format strings are required. Returns a 200 if the date parses, or a 400 with a message if not. If the date parses, the provided format can be provided as column metadata, and the imported values parse correctly. The format string is java DateTimeFormatter style e.g. dateFormat = \"MM/dd/yyyy\" and candidate = \"07/28/1987\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parse_date_using_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatetimeDto datetime_dto: The representation of the datetime object to parse
        :return: BaseResponseOfstring
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parse_date_using_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.parse_date_using_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def parse_date_using_post_with_http_info(self, **kwargs):  # noqa: E501
        """Parse a date  # noqa: E501

        Provides a simple endpoint to check whether a given date candidate parses with the provided format string.  Both the date candidate and format strings are required. Returns a 200 if the date parses, or a 400 with a message if not. If the date parses, the provided format can be provided as column metadata, and the imported values parse correctly. The format string is java DateTimeFormatter style e.g. dateFormat = \"MM/dd/yyyy\" and candidate = \"07/28/1987\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parse_date_using_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatetimeDto datetime_dto: The representation of the datetime object to parse
        :return: BaseResponseOfstring
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datetime_dto']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parse_date_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'datetime_dto' in params:
            body_params = params['datetime_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/util/datetime', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseOfstring',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
