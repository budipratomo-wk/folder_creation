# coding: utf-8

"""
    Cerebral API

    The Wdata Preparation API allow users to import data sets from their source system, tag, organize, manipulate, share, export, and query against the data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: scoutteam@workiva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PivotDefinitionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'columns': 'list[PivotViewDefinitionColumnDto]',
        'decimal_places': 'int',
        'filters': 'list[PivotViewDefinitionFilterDto]',
        'grand_total_enabled': 'str',
        'id': 'str',
        'multiple_headers': 'bool',
        'pivot_view_type': 'str',
        'rows': 'list[PivotViewDefinitionRowDto]',
        'sort_columns': 'list[str]',
        'subtotal_enabled': 'str',
        'values': 'list[PivotViewDefinitionValueDto]'
    }

    attribute_map = {
        'columns': 'columns',
        'decimal_places': 'decimalPlaces',
        'filters': 'filters',
        'grand_total_enabled': 'grandTotalEnabled',
        'id': 'id',
        'multiple_headers': 'multipleHeaders',
        'pivot_view_type': 'pivotViewType',
        'rows': 'rows',
        'sort_columns': 'sortColumns',
        'subtotal_enabled': 'subtotalEnabled',
        'values': 'values'
    }

    def __init__(self, columns=None, decimal_places=None, filters=None, grand_total_enabled=None, id=None, multiple_headers=None, pivot_view_type=None, rows=None, sort_columns=None, subtotal_enabled=None, values=None, _configuration=None):  # noqa: E501
        """PivotDefinitionDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._columns = None
        self._decimal_places = None
        self._filters = None
        self._grand_total_enabled = None
        self._id = None
        self._multiple_headers = None
        self._pivot_view_type = None
        self._rows = None
        self._sort_columns = None
        self._subtotal_enabled = None
        self._values = None
        self.discriminator = None

        if columns is not None:
            self.columns = columns
        if decimal_places is not None:
            self.decimal_places = decimal_places
        if filters is not None:
            self.filters = filters
        if grand_total_enabled is not None:
            self.grand_total_enabled = grand_total_enabled
        if id is not None:
            self.id = id
        if multiple_headers is not None:
            self.multiple_headers = multiple_headers
        if pivot_view_type is not None:
            self.pivot_view_type = pivot_view_type
        if rows is not None:
            self.rows = rows
        if sort_columns is not None:
            self.sort_columns = sort_columns
        if subtotal_enabled is not None:
            self.subtotal_enabled = subtotal_enabled
        if values is not None:
            self.values = values

    @property
    def columns(self):
        """Gets the columns of this PivotDefinitionDto.  # noqa: E501

        The colmnnns associated with the pivot view  # noqa: E501

        :return: The columns of this PivotDefinitionDto.  # noqa: E501
        :rtype: list[PivotViewDefinitionColumnDto]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this PivotDefinitionDto.

        The colmnnns associated with the pivot view  # noqa: E501

        :param columns: The columns of this PivotDefinitionDto.  # noqa: E501
        :type: list[PivotViewDefinitionColumnDto]
        """

        self._columns = columns

    @property
    def decimal_places(self):
        """Gets the decimal_places of this PivotDefinitionDto.  # noqa: E501

        Numeric data values are rounded to the number of decimal places.  The default number to round to and show is 2 decimal places, and the maximum number is capped at 16.  # noqa: E501

        :return: The decimal_places of this PivotDefinitionDto.  # noqa: E501
        :rtype: int
        """
        return self._decimal_places

    @decimal_places.setter
    def decimal_places(self, decimal_places):
        """Sets the decimal_places of this PivotDefinitionDto.

        Numeric data values are rounded to the number of decimal places.  The default number to round to and show is 2 decimal places, and the maximum number is capped at 16.  # noqa: E501

        :param decimal_places: The decimal_places of this PivotDefinitionDto.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                decimal_places is not None and decimal_places > 16):  # noqa: E501
            raise ValueError("Invalid value for `decimal_places`, must be a value less than or equal to `16`")  # noqa: E501
        if (self._configuration.client_side_validation and
                decimal_places is not None and decimal_places < 0):  # noqa: E501
            raise ValueError("Invalid value for `decimal_places`, must be a value greater than or equal to `0`")  # noqa: E501

        self._decimal_places = decimal_places

    @property
    def filters(self):
        """Gets the filters of this PivotDefinitionDto.  # noqa: E501

        The filters associated with the pivot view  # noqa: E501

        :return: The filters of this PivotDefinitionDto.  # noqa: E501
        :rtype: list[PivotViewDefinitionFilterDto]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this PivotDefinitionDto.

        The filters associated with the pivot view  # noqa: E501

        :param filters: The filters of this PivotDefinitionDto.  # noqa: E501
        :type: list[PivotViewDefinitionFilterDto]
        """

        self._filters = filters

    @property
    def grand_total_enabled(self):
        """Gets the grand_total_enabled of this PivotDefinitionDto.  # noqa: E501

        The level to which Grand Totals are enabled.  It is defaulted to DISABLED.  # noqa: E501

        :return: The grand_total_enabled of this PivotDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._grand_total_enabled

    @grand_total_enabled.setter
    def grand_total_enabled(self, grand_total_enabled):
        """Sets the grand_total_enabled of this PivotDefinitionDto.

        The level to which Grand Totals are enabled.  It is defaulted to DISABLED.  # noqa: E501

        :param grand_total_enabled: The grand_total_enabled of this PivotDefinitionDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLED", "ROW", "COLUMN", "DISABLED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                grand_total_enabled not in allowed_values):
            raise ValueError(
                "Invalid value for `grand_total_enabled` ({0}), must be one of {1}"  # noqa: E501
                .format(grand_total_enabled, allowed_values)
            )

        self._grand_total_enabled = grand_total_enabled

    @property
    def id(self):
        """Gets the id of this PivotDefinitionDto.  # noqa: E501

        The pivot view's definition's id  # noqa: E501

        :return: The id of this PivotDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PivotDefinitionDto.

        The pivot view's definition's id  # noqa: E501

        :param id: The id of this PivotDefinitionDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                id is not None and not re.search(r'[a-f0-9]{12}4[a-f0-9]{3}[89aAbB][a-f0-9]{15}', id)):  # noqa: E501
            raise ValueError(r"Invalid value for `id`, must be a follow pattern or equal to `/[a-f0-9]{12}4[a-f0-9]{3}[89aAbB][a-f0-9]{15}/`")  # noqa: E501

        self._id = id

    @property
    def multiple_headers(self):
        """Gets the multiple_headers of this PivotDefinitionDto.  # noqa: E501

        Denotes whether a pivot is created in multi-line header mode. Default is false.  # noqa: E501

        :return: The multiple_headers of this PivotDefinitionDto.  # noqa: E501
        :rtype: bool
        """
        return self._multiple_headers

    @multiple_headers.setter
    def multiple_headers(self, multiple_headers):
        """Sets the multiple_headers of this PivotDefinitionDto.

        Denotes whether a pivot is created in multi-line header mode. Default is false.  # noqa: E501

        :param multiple_headers: The multiple_headers of this PivotDefinitionDto.  # noqa: E501
        :type: bool
        """

        self._multiple_headers = multiple_headers

    @property
    def pivot_view_type(self):
        """Gets the pivot_view_type of this PivotDefinitionDto.  # noqa: E501

        The type of pivot view. Options are currently Classic and Compact.  # noqa: E501

        :return: The pivot_view_type of this PivotDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._pivot_view_type

    @pivot_view_type.setter
    def pivot_view_type(self, pivot_view_type):
        """Sets the pivot_view_type of this PivotDefinitionDto.

        The type of pivot view. Options are currently Classic and Compact.  # noqa: E501

        :param pivot_view_type: The pivot_view_type of this PivotDefinitionDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["CLASSIC", "COMPACT", "FLAT"]  # noqa: E501
        if (self._configuration.client_side_validation and
                pivot_view_type not in allowed_values):
            raise ValueError(
                "Invalid value for `pivot_view_type` ({0}), must be one of {1}"  # noqa: E501
                .format(pivot_view_type, allowed_values)
            )

        self._pivot_view_type = pivot_view_type

    @property
    def rows(self):
        """Gets the rows of this PivotDefinitionDto.  # noqa: E501

        The rows associated with the pivot view  # noqa: E501

        :return: The rows of this PivotDefinitionDto.  # noqa: E501
        :rtype: list[PivotViewDefinitionRowDto]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this PivotDefinitionDto.

        The rows associated with the pivot view  # noqa: E501

        :param rows: The rows of this PivotDefinitionDto.  # noqa: E501
        :type: list[PivotViewDefinitionRowDto]
        """

        self._rows = rows

    @property
    def sort_columns(self):
        """Gets the sort_columns of this PivotDefinitionDto.  # noqa: E501

        Columns with which to sort the crosstab query  # noqa: E501

        :return: The sort_columns of this PivotDefinitionDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._sort_columns

    @sort_columns.setter
    def sort_columns(self, sort_columns):
        """Sets the sort_columns of this PivotDefinitionDto.

        Columns with which to sort the crosstab query  # noqa: E501

        :param sort_columns: The sort_columns of this PivotDefinitionDto.  # noqa: E501
        :type: list[str]
        """

        self._sort_columns = sort_columns

    @property
    def subtotal_enabled(self):
        """Gets the subtotal_enabled of this PivotDefinitionDto.  # noqa: E501

        The level to which Subtotals are enabled.  It is defaulted to DISABLED.  # noqa: E501

        :return: The subtotal_enabled of this PivotDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._subtotal_enabled

    @subtotal_enabled.setter
    def subtotal_enabled(self, subtotal_enabled):
        """Sets the subtotal_enabled of this PivotDefinitionDto.

        The level to which Subtotals are enabled.  It is defaulted to DISABLED.  # noqa: E501

        :param subtotal_enabled: The subtotal_enabled of this PivotDefinitionDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLED", "ROW", "COLUMN", "DISABLED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                subtotal_enabled not in allowed_values):
            raise ValueError(
                "Invalid value for `subtotal_enabled` ({0}), must be one of {1}"  # noqa: E501
                .format(subtotal_enabled, allowed_values)
            )

        self._subtotal_enabled = subtotal_enabled

    @property
    def values(self):
        """Gets the values of this PivotDefinitionDto.  # noqa: E501

        The values associated with the pivot view  # noqa: E501

        :return: The values of this PivotDefinitionDto.  # noqa: E501
        :rtype: list[PivotViewDefinitionValueDto]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this PivotDefinitionDto.

        The values associated with the pivot view  # noqa: E501

        :param values: The values of this PivotDefinitionDto.  # noqa: E501
        :type: list[PivotViewDefinitionValueDto]
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PivotDefinitionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PivotDefinitionDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PivotDefinitionDto):
            return True

        return self.to_dict() != other.to_dict()
