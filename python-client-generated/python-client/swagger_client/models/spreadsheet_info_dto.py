# coding: utf-8

"""
    Cerebral API

    The Wdata Preparation API allow users to import data sets from their source system, tag, organize, manipulate, share, export, and query against the data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: scoutteam@workiva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SpreadsheetInfoDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sheet_id': 'str',
        'workbook_id': 'str'
    }

    attribute_map = {
        'sheet_id': 'sheetId',
        'workbook_id': 'workbookId'
    }

    def __init__(self, sheet_id=None, workbook_id=None, _configuration=None):  # noqa: E501
        """SpreadsheetInfoDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._sheet_id = None
        self._workbook_id = None
        self.discriminator = None

        if sheet_id is not None:
            self.sheet_id = sheet_id
        if workbook_id is not None:
            self.workbook_id = workbook_id

    @property
    def sheet_id(self):
        """Gets the sheet_id of this SpreadsheetInfoDto.  # noqa: E501

        The unique identifier of the sheet  # noqa: E501

        :return: The sheet_id of this SpreadsheetInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._sheet_id

    @sheet_id.setter
    def sheet_id(self, sheet_id):
        """Sets the sheet_id of this SpreadsheetInfoDto.

        The unique identifier of the sheet  # noqa: E501

        :param sheet_id: The sheet_id of this SpreadsheetInfoDto.  # noqa: E501
        :type: str
        """

        self._sheet_id = sheet_id

    @property
    def workbook_id(self):
        """Gets the workbook_id of this SpreadsheetInfoDto.  # noqa: E501

        The unique identifier of the workbook  # noqa: E501

        :return: The workbook_id of this SpreadsheetInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._workbook_id

    @workbook_id.setter
    def workbook_id(self, workbook_id):
        """Sets the workbook_id of this SpreadsheetInfoDto.

        The unique identifier of the workbook  # noqa: E501

        :param workbook_id: The workbook_id of this SpreadsheetInfoDto.  # noqa: E501
        :type: str
        """

        self._workbook_id = workbook_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpreadsheetInfoDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpreadsheetInfoDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SpreadsheetInfoDto):
            return True

        return self.to_dict() != other.to_dict()
