# coding: utf-8

"""
    Cerebral API

    The Wdata Preparation API allow users to import data sets from their source system, tag, organize, manipulate, share, export, and query against the data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: scoutteam@workiva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Column(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias': 'str',
        'description': 'str',
        'metadata': 'dict(str, object)',
        'mode': 'str',
        'name': 'str',
        'type': 'str'
    }

    attribute_map = {
        'alias': 'alias',
        'description': 'description',
        'metadata': 'metadata',
        'mode': 'mode',
        'name': 'name',
        'type': 'type'
    }

    def __init__(self, alias=None, description=None, metadata=None, mode=None, name=None, type=None, _configuration=None):  # noqa: E501
        """Column - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._alias = None
        self._description = None
        self._metadata = None
        self._mode = None
        self._name = None
        self._type = None
        self.discriminator = None

        if alias is not None:
            self.alias = alias
        if description is not None:
            self.description = description
        if metadata is not None:
            self.metadata = metadata
        if mode is not None:
            self.mode = mode
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type

    @property
    def alias(self):
        """Gets the alias of this Column.  # noqa: E501


        :return: The alias of this Column.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this Column.


        :param alias: The alias of this Column.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def description(self):
        """Gets the description of this Column.  # noqa: E501


        :return: The description of this Column.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Column.


        :param description: The description of this Column.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def metadata(self):
        """Gets the metadata of this Column.  # noqa: E501


        :return: The metadata of this Column.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Column.


        :param metadata: The metadata of this Column.  # noqa: E501
        :type: dict(str, object)
        """

        self._metadata = metadata

    @property
    def mode(self):
        """Gets the mode of this Column.  # noqa: E501


        :return: The mode of this Column.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Column.


        :param mode: The mode of this Column.  # noqa: E501
        :type: str
        """
        allowed_values = ["nullable", "required", "repeated"]  # noqa: E501
        if (self._configuration.client_side_validation and
                mode not in allowed_values):
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this Column.  # noqa: E501


        :return: The name of this Column.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Column.


        :param name: The name of this Column.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Column.  # noqa: E501


        :return: The type of this Column.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Column.


        :param type: The type of this Column.  # noqa: E501
        :type: str
        """
        allowed_values = ["string", "bytes", "integer", "float", "boolean", "timestamp", "date", "time", "datetime", "global_parameter", "nested_query_parameter"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Column, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Column):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Column):
            return True

        return self.to_dict() != other.to_dict()
