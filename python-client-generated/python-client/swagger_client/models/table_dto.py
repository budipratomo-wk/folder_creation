# coding: utf-8

"""
    Cerebral API

    The Wdata Preparation API allow users to import data sets from their source system, tag, organize, manipulate, share, export, and query against the data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: scoutteam@workiva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TableDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'database_id': 'str',
        'dataset_updated': 'datetime',
        'deleted': 'bool',
        'description': 'str',
        'id': 'str',
        'is_shared': 'bool',
        'last_uploaded': 'datetime',
        'name': 'str',
        'parent_id': 'str',
        'read_only': 'bool',
        'table_schema': 'TableSchema',
        'type': 'str',
        'unique_table_constraints': 'list[UniqueConstraintDto]',
        'updated': 'datetime',
        'user_id': 'str',
        'version': 'int'
    }

    attribute_map = {
        'created': 'created',
        'database_id': 'databaseId',
        'dataset_updated': 'datasetUpdated',
        'deleted': 'deleted',
        'description': 'description',
        'id': 'id',
        'is_shared': 'isShared',
        'last_uploaded': 'lastUploaded',
        'name': 'name',
        'parent_id': 'parentId',
        'read_only': 'readOnly',
        'table_schema': 'tableSchema',
        'type': 'type',
        'unique_table_constraints': 'uniqueTableConstraints',
        'updated': 'updated',
        'user_id': 'userId',
        'version': 'version'
    }

    def __init__(self, created=None, database_id=None, dataset_updated=None, deleted=None, description=None, id=None, is_shared=None, last_uploaded=None, name=None, parent_id=None, read_only=None, table_schema=None, type=None, unique_table_constraints=None, updated=None, user_id=None, version=None, _configuration=None):  # noqa: E501
        """TableDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created = None
        self._database_id = None
        self._dataset_updated = None
        self._deleted = None
        self._description = None
        self._id = None
        self._is_shared = None
        self._last_uploaded = None
        self._name = None
        self._parent_id = None
        self._read_only = None
        self._table_schema = None
        self._type = None
        self._unique_table_constraints = None
        self._updated = None
        self._user_id = None
        self._version = None
        self.discriminator = None

        if created is not None:
            self.created = created
        if database_id is not None:
            self.database_id = database_id
        if dataset_updated is not None:
            self.dataset_updated = dataset_updated
        if deleted is not None:
            self.deleted = deleted
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        self.is_shared = is_shared
        if last_uploaded is not None:
            self.last_uploaded = last_uploaded
        if name is not None:
            self.name = name
        if parent_id is not None:
            self.parent_id = parent_id
        if read_only is not None:
            self.read_only = read_only
        if table_schema is not None:
            self.table_schema = table_schema
        if type is not None:
            self.type = type
        self.unique_table_constraints = unique_table_constraints
        if updated is not None:
            self.updated = updated
        if user_id is not None:
            self.user_id = user_id
        if version is not None:
            self.version = version

    @property
    def created(self):
        """Gets the created of this TableDto.  # noqa: E501

        When the entity was created  # noqa: E501

        :return: The created of this TableDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this TableDto.

        When the entity was created  # noqa: E501

        :param created: The created of this TableDto.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def database_id(self):
        """Gets the database_id of this TableDto.  # noqa: E501

        The unique identifier of the database where the table resides.  # noqa: E501

        :return: The database_id of this TableDto.  # noqa: E501
        :rtype: str
        """
        return self._database_id

    @database_id.setter
    def database_id(self, database_id):
        """Sets the database_id of this TableDto.

        The unique identifier of the database where the table resides.  # noqa: E501

        :param database_id: The database_id of this TableDto.  # noqa: E501
        :type: str
        """

        self._database_id = database_id

    @property
    def dataset_updated(self):
        """Gets the dataset_updated of this TableDto.  # noqa: E501

        The last time that the data set for this table was modified.  # noqa: E501

        :return: The dataset_updated of this TableDto.  # noqa: E501
        :rtype: datetime
        """
        return self._dataset_updated

    @dataset_updated.setter
    def dataset_updated(self, dataset_updated):
        """Sets the dataset_updated of this TableDto.

        The last time that the data set for this table was modified.  # noqa: E501

        :param dataset_updated: The dataset_updated of this TableDto.  # noqa: E501
        :type: datetime
        """

        self._dataset_updated = dataset_updated

    @property
    def deleted(self):
        """Gets the deleted of this TableDto.  # noqa: E501

        This is for backwards compatibility only and will always return false.  # noqa: E501

        :return: The deleted of this TableDto.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this TableDto.

        This is for backwards compatibility only and will always return false.  # noqa: E501

        :param deleted: The deleted of this TableDto.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this TableDto.  # noqa: E501

        May be at most 255 characters in length  # noqa: E501

        :return: The description of this TableDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TableDto.

        May be at most 255 characters in length  # noqa: E501

        :param description: The description of this TableDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 255):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def id(self):
        """Gets the id of this TableDto.  # noqa: E501

        The entity's unique identifier  # noqa: E501

        :return: The id of this TableDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TableDto.

        The entity's unique identifier  # noqa: E501

        :param id: The id of this TableDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_shared(self):
        """Gets the is_shared of this TableDto.  # noqa: E501

        A property indicating if this table is shared to any destination.  # noqa: E501

        :return: The is_shared of this TableDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_shared

    @is_shared.setter
    def is_shared(self, is_shared):
        """Sets the is_shared of this TableDto.

        A property indicating if this table is shared to any destination.  # noqa: E501

        :param is_shared: The is_shared of this TableDto.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_shared is None:
            raise ValueError("Invalid value for `is_shared`, must not be `None`")  # noqa: E501

        self._is_shared = is_shared

    @property
    def last_uploaded(self):
        """Gets the last_uploaded of this TableDto.  # noqa: E501

        Contains the date and time of the last file that was imported into the table. Valuable for determining if the data is stale.  # noqa: E501

        :return: The last_uploaded of this TableDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_uploaded

    @last_uploaded.setter
    def last_uploaded(self, last_uploaded):
        """Sets the last_uploaded of this TableDto.

        Contains the date and time of the last file that was imported into the table. Valuable for determining if the data is stale.  # noqa: E501

        :param last_uploaded: The last_uploaded of this TableDto.  # noqa: E501
        :type: datetime
        """

        self._last_uploaded = last_uploaded

    @property
    def name(self):
        """Gets the name of this TableDto.  # noqa: E501

        May be at most 150 characters in length  # noqa: E501

        :return: The name of this TableDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TableDto.

        May be at most 150 characters in length  # noqa: E501

        :param name: The name of this TableDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 150):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `150`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def parent_id(self):
        """Gets the parent_id of this TableDto.  # noqa: E501

        If non-null, indicates the parent of this entity. Must be modified through the folder api.  # noqa: E501

        :return: The parent_id of this TableDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this TableDto.

        If non-null, indicates the parent of this entity. Must be modified through the folder api.  # noqa: E501

        :param parent_id: The parent_id of this TableDto.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def read_only(self):
        """Gets the read_only of this TableDto.  # noqa: E501

        Indicates if this table is readonly in the account receiving this table. If so, any attempt to edit the table will fail.  # noqa: E501

        :return: The read_only of this TableDto.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this TableDto.

        Indicates if this table is readonly in the account receiving this table. If so, any attempt to edit the table will fail.  # noqa: E501

        :param read_only: The read_only of this TableDto.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def table_schema(self):
        """Gets the table_schema of this TableDto.  # noqa: E501

        The schema to apply  # noqa: E501

        :return: The table_schema of this TableDto.  # noqa: E501
        :rtype: TableSchema
        """
        return self._table_schema

    @table_schema.setter
    def table_schema(self, table_schema):
        """Sets the table_schema of this TableDto.

        The schema to apply  # noqa: E501

        :param table_schema: The table_schema of this TableDto.  # noqa: E501
        :type: TableSchema
        """

        self._table_schema = table_schema

    @property
    def type(self):
        """Gets the type of this TableDto.  # noqa: E501

        The type of table  # noqa: E501

        :return: The type of this TableDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TableDto.

        The type of table  # noqa: E501

        :param type: The type of this TableDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["data", "lookup"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def unique_table_constraints(self):
        """Gets the unique_table_constraints of this TableDto.  # noqa: E501

        A property indicating the unique constraints on the table.  # noqa: E501

        :return: The unique_table_constraints of this TableDto.  # noqa: E501
        :rtype: list[UniqueConstraintDto]
        """
        return self._unique_table_constraints

    @unique_table_constraints.setter
    def unique_table_constraints(self, unique_table_constraints):
        """Sets the unique_table_constraints of this TableDto.

        A property indicating the unique constraints on the table.  # noqa: E501

        :param unique_table_constraints: The unique_table_constraints of this TableDto.  # noqa: E501
        :type: list[UniqueConstraintDto]
        """
        if self._configuration.client_side_validation and unique_table_constraints is None:
            raise ValueError("Invalid value for `unique_table_constraints`, must not be `None`")  # noqa: E501

        self._unique_table_constraints = unique_table_constraints

    @property
    def updated(self):
        """Gets the updated of this TableDto.  # noqa: E501

        When the entity was last updated  # noqa: E501

        :return: The updated of this TableDto.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this TableDto.

        When the entity was last updated  # noqa: E501

        :param updated: The updated of this TableDto.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def user_id(self):
        """Gets the user_id of this TableDto.  # noqa: E501

        The owner of the entity  # noqa: E501

        :return: The user_id of this TableDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TableDto.

        The owner of the entity  # noqa: E501

        :param user_id: The user_id of this TableDto.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def version(self):
        """Gets the version of this TableDto.  # noqa: E501

        The version of the current representation of the entity  # noqa: E501

        :return: The version of this TableDto.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TableDto.

        The version of the current representation of the entity  # noqa: E501

        :param version: The version of this TableDto.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TableDto):
            return True

        return self.to_dict() != other.to_dict()
