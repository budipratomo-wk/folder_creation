# coding: utf-8

"""
    Cerebral API

    The Wdata Preparation API allow users to import data sets from their source system, tag, organize, manipulate, share, export, and query against the data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: scoutteam@workiva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ImportInfoDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_files': 'int',
        'num_records': 'int',
        'table_id': 'str'
    }

    attribute_map = {
        'num_files': 'numFiles',
        'num_records': 'numRecords',
        'table_id': 'tableId'
    }

    def __init__(self, num_files=None, num_records=None, table_id=None, _configuration=None):  # noqa: E501
        """ImportInfoDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._num_files = None
        self._num_records = None
        self._table_id = None
        self.discriminator = None

        if num_files is not None:
            self.num_files = num_files
        if num_records is not None:
            self.num_records = num_records
        if table_id is not None:
            self.table_id = table_id

    @property
    def num_files(self):
        """Gets the num_files of this ImportInfoDto.  # noqa: E501

        The total number of individual files imported to the table.  # noqa: E501

        :return: The num_files of this ImportInfoDto.  # noqa: E501
        :rtype: int
        """
        return self._num_files

    @num_files.setter
    def num_files(self, num_files):
        """Sets the num_files of this ImportInfoDto.

        The total number of individual files imported to the table.  # noqa: E501

        :param num_files: The num_files of this ImportInfoDto.  # noqa: E501
        :type: int
        """

        self._num_files = num_files

    @property
    def num_records(self):
        """Gets the num_records of this ImportInfoDto.  # noqa: E501

        The total number of records/rows of data imported to the table.  # noqa: E501

        :return: The num_records of this ImportInfoDto.  # noqa: E501
        :rtype: int
        """
        return self._num_records

    @num_records.setter
    def num_records(self, num_records):
        """Sets the num_records of this ImportInfoDto.

        The total number of records/rows of data imported to the table.  # noqa: E501

        :param num_records: The num_records of this ImportInfoDto.  # noqa: E501
        :type: int
        """

        self._num_records = num_records

    @property
    def table_id(self):
        """Gets the table_id of this ImportInfoDto.  # noqa: E501

        The id for the table that the import info applies to.  # noqa: E501

        :return: The table_id of this ImportInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """Sets the table_id of this ImportInfoDto.

        The id for the table that the import info applies to.  # noqa: E501

        :param table_id: The table_id of this ImportInfoDto.  # noqa: E501
        :type: str
        """

        self._table_id = table_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportInfoDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportInfoDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportInfoDto):
            return True

        return self.to_dict() != other.to_dict()
