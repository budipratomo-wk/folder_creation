# coding: utf-8

"""
    Cerebral API

    The Wdata Preparation API allow users to import data sets from their source system, tag, organize, manipulate, share, export, and query against the data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: scoutteam@workiva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class RefreshConnectionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connection_id': 'str',
        'destination_parameters': 'object',
        'source_parameters': 'object',
        'use_previous_destination_parameters': 'bool',
        'use_previous_source_parameters': 'bool'
    }

    attribute_map = {
        'connection_id': 'connectionId',
        'destination_parameters': 'destinationParameters',
        'source_parameters': 'sourceParameters',
        'use_previous_destination_parameters': 'usePreviousDestinationParameters',
        'use_previous_source_parameters': 'usePreviousSourceParameters'
    }

    def __init__(self, connection_id=None, destination_parameters=None, source_parameters=None, use_previous_destination_parameters=None, use_previous_source_parameters=None, _configuration=None):  # noqa: E501
        """RefreshConnectionDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._connection_id = None
        self._destination_parameters = None
        self._source_parameters = None
        self._use_previous_destination_parameters = None
        self._use_previous_source_parameters = None
        self.discriminator = None

        if connection_id is not None:
            self.connection_id = connection_id
        if destination_parameters is not None:
            self.destination_parameters = destination_parameters
        if source_parameters is not None:
            self.source_parameters = source_parameters
        if use_previous_destination_parameters is not None:
            self.use_previous_destination_parameters = use_previous_destination_parameters
        if use_previous_source_parameters is not None:
            self.use_previous_source_parameters = use_previous_source_parameters

    @property
    def connection_id(self):
        """Gets the connection_id of this RefreshConnectionDto.  # noqa: E501

        The unique ID of the connection  # noqa: E501

        :return: The connection_id of this RefreshConnectionDto.  # noqa: E501
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this RefreshConnectionDto.

        The unique ID of the connection  # noqa: E501

        :param connection_id: The connection_id of this RefreshConnectionDto.  # noqa: E501
        :type: str
        """

        self._connection_id = connection_id

    @property
    def destination_parameters(self):
        """Gets the destination_parameters of this RefreshConnectionDto.  # noqa: E501

        Parameters to send to the destination, on refresh  # noqa: E501

        :return: The destination_parameters of this RefreshConnectionDto.  # noqa: E501
        :rtype: object
        """
        return self._destination_parameters

    @destination_parameters.setter
    def destination_parameters(self, destination_parameters):
        """Sets the destination_parameters of this RefreshConnectionDto.

        Parameters to send to the destination, on refresh  # noqa: E501

        :param destination_parameters: The destination_parameters of this RefreshConnectionDto.  # noqa: E501
        :type: object
        """

        self._destination_parameters = destination_parameters

    @property
    def source_parameters(self):
        """Gets the source_parameters of this RefreshConnectionDto.  # noqa: E501

        Parameters to send to the source, on refresh  # noqa: E501

        :return: The source_parameters of this RefreshConnectionDto.  # noqa: E501
        :rtype: object
        """
        return self._source_parameters

    @source_parameters.setter
    def source_parameters(self, source_parameters):
        """Sets the source_parameters of this RefreshConnectionDto.

        Parameters to send to the source, on refresh  # noqa: E501

        :param source_parameters: The source_parameters of this RefreshConnectionDto.  # noqa: E501
        :type: object
        """

        self._source_parameters = source_parameters

    @property
    def use_previous_destination_parameters(self):
        """Gets the use_previous_destination_parameters of this RefreshConnectionDto.  # noqa: E501

        Use the destination parameters from the previous run. This overrides any specified destination parameters. Ignored by \"Refresh batch of connections\" endpoint  # noqa: E501

        :return: The use_previous_destination_parameters of this RefreshConnectionDto.  # noqa: E501
        :rtype: bool
        """
        return self._use_previous_destination_parameters

    @use_previous_destination_parameters.setter
    def use_previous_destination_parameters(self, use_previous_destination_parameters):
        """Sets the use_previous_destination_parameters of this RefreshConnectionDto.

        Use the destination parameters from the previous run. This overrides any specified destination parameters. Ignored by \"Refresh batch of connections\" endpoint  # noqa: E501

        :param use_previous_destination_parameters: The use_previous_destination_parameters of this RefreshConnectionDto.  # noqa: E501
        :type: bool
        """

        self._use_previous_destination_parameters = use_previous_destination_parameters

    @property
    def use_previous_source_parameters(self):
        """Gets the use_previous_source_parameters of this RefreshConnectionDto.  # noqa: E501

        Use the source parameters from the previous run. This overrides any specified source parameters. Ignored by \"Refresh batch of connections\" endpoint  # noqa: E501

        :return: The use_previous_source_parameters of this RefreshConnectionDto.  # noqa: E501
        :rtype: bool
        """
        return self._use_previous_source_parameters

    @use_previous_source_parameters.setter
    def use_previous_source_parameters(self, use_previous_source_parameters):
        """Sets the use_previous_source_parameters of this RefreshConnectionDto.

        Use the source parameters from the previous run. This overrides any specified source parameters. Ignored by \"Refresh batch of connections\" endpoint  # noqa: E501

        :param use_previous_source_parameters: The use_previous_source_parameters of this RefreshConnectionDto.  # noqa: E501
        :type: bool
        """

        self._use_previous_source_parameters = use_previous_source_parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RefreshConnectionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RefreshConnectionDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RefreshConnectionDto):
            return True

        return self.to_dict() != other.to_dict()
