# coding: utf-8

"""
    Cerebral API

    The Wdata Preparation API allow users to import data sets from their source system, tag, organize, manipulate, share, export, and query against the data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: scoutteam@workiva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SelectListDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'description': 'str',
        'id': 'str',
        'name': 'str',
        'type': 'str',
        'updated': 'datetime',
        'user_id': 'str',
        'value_type': 'str',
        'values': 'list[object]',
        'version': 'int'
    }

    attribute_map = {
        'created': 'created',
        'description': 'description',
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'updated': 'updated',
        'user_id': 'userId',
        'value_type': 'valueType',
        'values': 'values',
        'version': 'version'
    }

    def __init__(self, created=None, description=None, id=None, name=None, type=None, updated=None, user_id=None, value_type=None, values=None, version=None, _configuration=None):  # noqa: E501
        """SelectListDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created = None
        self._description = None
        self._id = None
        self._name = None
        self._type = None
        self._updated = None
        self._user_id = None
        self._value_type = None
        self._values = None
        self._version = None
        self.discriminator = None

        if created is not None:
            self.created = created
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if updated is not None:
            self.updated = updated
        if user_id is not None:
            self.user_id = user_id
        if value_type is not None:
            self.value_type = value_type
        if values is not None:
            self.values = values
        if version is not None:
            self.version = version

    @property
    def created(self):
        """Gets the created of this SelectListDto.  # noqa: E501

        When the entity was created  # noqa: E501

        :return: The created of this SelectListDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SelectListDto.

        When the entity was created  # noqa: E501

        :param created: The created of this SelectListDto.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this SelectListDto.  # noqa: E501

        Description of this select list. Max length: 1024  # noqa: E501

        :return: The description of this SelectListDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SelectListDto.

        Description of this select list. Max length: 1024  # noqa: E501

        :param description: The description of this SelectListDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 1024):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def id(self):
        """Gets the id of this SelectListDto.  # noqa: E501

        The entity's unique identifier  # noqa: E501

        :return: The id of this SelectListDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SelectListDto.

        The entity's unique identifier  # noqa: E501

        :param id: The id of this SelectListDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SelectListDto.  # noqa: E501

        Name of this select list. Max length: 100  # noqa: E501

        :return: The name of this SelectListDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SelectListDto.

        Name of this select list. Max length: 100  # noqa: E501

        :param name: The name of this SelectListDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this SelectListDto.  # noqa: E501

        This is currently not used and its value will always be 'static'. In the future, more types will be added.  # noqa: E501

        :return: The type of this SelectListDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SelectListDto.

        This is currently not used and its value will always be 'static'. In the future, more types will be added.  # noqa: E501

        :param type: The type of this SelectListDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["static"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated(self):
        """Gets the updated of this SelectListDto.  # noqa: E501

        When the entity was last updated  # noqa: E501

        :return: The updated of this SelectListDto.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this SelectListDto.

        When the entity was last updated  # noqa: E501

        :param updated: The updated of this SelectListDto.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def user_id(self):
        """Gets the user_id of this SelectListDto.  # noqa: E501

        The owner of the entity  # noqa: E501

        :return: The user_id of this SelectListDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SelectListDto.

        The owner of the entity  # noqa: E501

        :param user_id: The user_id of this SelectListDto.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def value_type(self):
        """Gets the value_type of this SelectListDto.  # noqa: E501

        Defines the type of the items in the list.  # noqa: E501

        :return: The value_type of this SelectListDto.  # noqa: E501
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this SelectListDto.

        Defines the type of the items in the list.  # noqa: E501

        :param value_type: The value_type of this SelectListDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["string", "bytes", "integer", "float", "boolean", "timestamp", "date", "time", "datetime", "global_parameter", "nested_query_parameter"]  # noqa: E501
        if (self._configuration.client_side_validation and
                value_type not in allowed_values):
            raise ValueError(
                "Invalid value for `value_type` ({0}), must be one of {1}"  # noqa: E501
                .format(value_type, allowed_values)
            )

        self._value_type = value_type

    @property
    def values(self):
        """Gets the values of this SelectListDto.  # noqa: E501

        List of possible values for the list. These values will be validated against the valueType provided.  # noqa: E501

        :return: The values of this SelectListDto.  # noqa: E501
        :rtype: list[object]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this SelectListDto.

        List of possible values for the list. These values will be validated against the valueType provided.  # noqa: E501

        :param values: The values of this SelectListDto.  # noqa: E501
        :type: list[object]
        """

        self._values = values

    @property
    def version(self):
        """Gets the version of this SelectListDto.  # noqa: E501

        The version of the current representation of the entity  # noqa: E501

        :return: The version of this SelectListDto.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SelectListDto.

        The version of the current representation of the entity  # noqa: E501

        :param version: The version of this SelectListDto.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SelectListDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SelectListDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SelectListDto):
            return True

        return self.to_dict() != other.to_dict()
