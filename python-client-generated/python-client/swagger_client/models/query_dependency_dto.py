# coding: utf-8

"""
    Cerebral API

    The Wdata Preparation API allow users to import data sets from their source system, tag, organize, manipulate, share, export, and query against the data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: scoutteam@workiva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class QueryDependencyDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'database_id': 'str',
        'system': 'str',
        'table_id': 'str'
    }

    attribute_map = {
        'database_id': 'databaseId',
        'system': 'system',
        'table_id': 'tableId'
    }

    def __init__(self, database_id=None, system=None, table_id=None, _configuration=None):  # noqa: E501
        """QueryDependencyDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._database_id = None
        self._system = None
        self._table_id = None
        self.discriminator = None

        if database_id is not None:
            self.database_id = database_id
        if system is not None:
            self.system = system
        if table_id is not None:
            self.table_id = table_id

    @property
    def database_id(self):
        """Gets the database_id of this QueryDependencyDto.  # noqa: E501

        The database in which this dependency exists.  # noqa: E501

        :return: The database_id of this QueryDependencyDto.  # noqa: E501
        :rtype: str
        """
        return self._database_id

    @database_id.setter
    def database_id(self, database_id):
        """Sets the database_id of this QueryDependencyDto.

        The database in which this dependency exists.  # noqa: E501

        :param database_id: The database_id of this QueryDependencyDto.  # noqa: E501
        :type: str
        """

        self._database_id = database_id

    @property
    def system(self):
        """Gets the system of this QueryDependencyDto.  # noqa: E501

        The name of the system holding this reference.  # noqa: E501

        :return: The system of this QueryDependencyDto.  # noqa: E501
        :rtype: str
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this QueryDependencyDto.

        The name of the system holding this reference.  # noqa: E501

        :param system: The system of this QueryDependencyDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["prep", "spreadsheets", "queries"]  # noqa: E501
        if (self._configuration.client_side_validation and
                system not in allowed_values):
            raise ValueError(
                "Invalid value for `system` ({0}), must be one of {1}"  # noqa: E501
                .format(system, allowed_values)
            )

        self._system = system

    @property
    def table_id(self):
        """Gets the table_id of this QueryDependencyDto.  # noqa: E501

        The id of the table this dependency represents.  # noqa: E501

        :return: The table_id of this QueryDependencyDto.  # noqa: E501
        :rtype: str
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """Sets the table_id of this QueryDependencyDto.

        The id of the table this dependency represents.  # noqa: E501

        :param table_id: The table_id of this QueryDependencyDto.  # noqa: E501
        :type: str
        """

        self._table_id = table_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QueryDependencyDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryDependencyDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QueryDependencyDto):
            return True

        return self.to_dict() != other.to_dict()
