# coding: utf-8

"""
    Cerebral API

    The Wdata Preparation API allow users to import data sets from their source system, tag, organize, manipulate, share, export, and query against the data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: scoutteam@workiva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class QueryResultDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bytes_scanned': 'int',
        'columns': 'list[ColumnInfoDto]',
        'created': 'datetime',
        'duration': 'int',
        'error': 'str',
        'id': 'str',
        'is_explain': 'bool',
        'parameters': 'dict(str, object)',
        'pivot_status': 'str',
        'query_dto': 'QueryDto',
        'query_id': 'str',
        'query_parameters': 'list[QueryParameterDto]',
        'query_text': 'str',
        'rows_returned': 'int',
        'size': 'int',
        'status': 'str',
        'updated': 'datetime',
        'user_id': 'str',
        'version': 'int'
    }

    attribute_map = {
        'bytes_scanned': 'bytesScanned',
        'columns': 'columns',
        'created': 'created',
        'duration': 'duration',
        'error': 'error',
        'id': 'id',
        'is_explain': 'isExplain',
        'parameters': 'parameters',
        'pivot_status': 'pivotStatus',
        'query_dto': 'queryDto',
        'query_id': 'queryId',
        'query_parameters': 'queryParameters',
        'query_text': 'queryText',
        'rows_returned': 'rowsReturned',
        'size': 'size',
        'status': 'status',
        'updated': 'updated',
        'user_id': 'userId',
        'version': 'version'
    }

    def __init__(self, bytes_scanned=None, columns=None, created=None, duration=None, error=None, id=None, is_explain=None, parameters=None, pivot_status=None, query_dto=None, query_id=None, query_parameters=None, query_text=None, rows_returned=None, size=None, status=None, updated=None, user_id=None, version=None, _configuration=None):  # noqa: E501
        """QueryResultDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bytes_scanned = None
        self._columns = None
        self._created = None
        self._duration = None
        self._error = None
        self._id = None
        self._is_explain = None
        self._parameters = None
        self._pivot_status = None
        self._query_dto = None
        self._query_id = None
        self._query_parameters = None
        self._query_text = None
        self._rows_returned = None
        self._size = None
        self._status = None
        self._updated = None
        self._user_id = None
        self._version = None
        self.discriminator = None

        if bytes_scanned is not None:
            self.bytes_scanned = bytes_scanned
        if columns is not None:
            self.columns = columns
        if created is not None:
            self.created = created
        if duration is not None:
            self.duration = duration
        if error is not None:
            self.error = error
        if id is not None:
            self.id = id
        if is_explain is not None:
            self.is_explain = is_explain
        if parameters is not None:
            self.parameters = parameters
        if pivot_status is not None:
            self.pivot_status = pivot_status
        if query_dto is not None:
            self.query_dto = query_dto
        if query_id is not None:
            self.query_id = query_id
        if query_parameters is not None:
            self.query_parameters = query_parameters
        if query_text is not None:
            self.query_text = query_text
        if rows_returned is not None:
            self.rows_returned = rows_returned
        if size is not None:
            self.size = size
        if status is not None:
            self.status = status
        if updated is not None:
            self.updated = updated
        if user_id is not None:
            self.user_id = user_id
        if version is not None:
            self.version = version

    @property
    def bytes_scanned(self):
        """Gets the bytes_scanned of this QueryResultDto.  # noqa: E501

        The number of bytes scanned  # noqa: E501

        :return: The bytes_scanned of this QueryResultDto.  # noqa: E501
        :rtype: int
        """
        return self._bytes_scanned

    @bytes_scanned.setter
    def bytes_scanned(self, bytes_scanned):
        """Sets the bytes_scanned of this QueryResultDto.

        The number of bytes scanned  # noqa: E501

        :param bytes_scanned: The bytes_scanned of this QueryResultDto.  # noqa: E501
        :type: int
        """

        self._bytes_scanned = bytes_scanned

    @property
    def columns(self):
        """Gets the columns of this QueryResultDto.  # noqa: E501

        If the query has successfully completed, contains a list of columns and their associated computed types from the query.  # noqa: E501

        :return: The columns of this QueryResultDto.  # noqa: E501
        :rtype: list[ColumnInfoDto]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this QueryResultDto.

        If the query has successfully completed, contains a list of columns and their associated computed types from the query.  # noqa: E501

        :param columns: The columns of this QueryResultDto.  # noqa: E501
        :type: list[ColumnInfoDto]
        """

        self._columns = columns

    @property
    def created(self):
        """Gets the created of this QueryResultDto.  # noqa: E501

        When the entity was created  # noqa: E501

        :return: The created of this QueryResultDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this QueryResultDto.

        When the entity was created  # noqa: E501

        :param created: The created of this QueryResultDto.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def duration(self):
        """Gets the duration of this QueryResultDto.  # noqa: E501

        The duration of time it took to execute the query  # noqa: E501

        :return: The duration of this QueryResultDto.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this QueryResultDto.

        The duration of time it took to execute the query  # noqa: E501

        :param duration: The duration of this QueryResultDto.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def error(self):
        """Gets the error of this QueryResultDto.  # noqa: E501

        If an error was encountered during the query, this field will be populated with error text.  # noqa: E501

        :return: The error of this QueryResultDto.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this QueryResultDto.

        If an error was encountered during the query, this field will be populated with error text.  # noqa: E501

        :param error: The error of this QueryResultDto.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def id(self):
        """Gets the id of this QueryResultDto.  # noqa: E501

        The entity's unique identifier  # noqa: E501

        :return: The id of this QueryResultDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QueryResultDto.

        The entity's unique identifier  # noqa: E501

        :param id: The id of this QueryResultDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_explain(self):
        """Gets the is_explain of this QueryResultDto.  # noqa: E501

        Determines if this query is to be explained and not executed  # noqa: E501

        :return: The is_explain of this QueryResultDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_explain

    @is_explain.setter
    def is_explain(self, is_explain):
        """Sets the is_explain of this QueryResultDto.

        Determines if this query is to be explained and not executed  # noqa: E501

        :param is_explain: The is_explain of this QueryResultDto.  # noqa: E501
        :type: bool
        """

        self._is_explain = is_explain

    @property
    def parameters(self):
        """Gets the parameters of this QueryResultDto.  # noqa: E501

        The query parameter map  # noqa: E501

        :return: The parameters of this QueryResultDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this QueryResultDto.

        The query parameter map  # noqa: E501

        :param parameters: The parameters of this QueryResultDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._parameters = parameters

    @property
    def pivot_status(self):
        """Gets the pivot_status of this QueryResultDto.  # noqa: E501

        The current status of the pivot execution  # noqa: E501

        :return: The pivot_status of this QueryResultDto.  # noqa: E501
        :rtype: str
        """
        return self._pivot_status

    @pivot_status.setter
    def pivot_status(self, pivot_status):
        """Sets the pivot_status of this QueryResultDto.

        The current status of the pivot execution  # noqa: E501

        :param pivot_status: The pivot_status of this QueryResultDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["NOT_STARTED", "RUNNING", "COMPLETE", "ERROR", "CANCELLED", "RUNNING_QUERY", "PIVOT_QUEUED", "RUNNING_PIVOT", "QUERY_COMPLETE", "NOT_APPLICABLE", "PIVOT_ERROR"]  # noqa: E501
        if (self._configuration.client_side_validation and
                pivot_status not in allowed_values):
            raise ValueError(
                "Invalid value for `pivot_status` ({0}), must be one of {1}"  # noqa: E501
                .format(pivot_status, allowed_values)
            )

        self._pivot_status = pivot_status

    @property
    def query_dto(self):
        """Gets the query_dto of this QueryResultDto.  # noqa: E501

        Associated queryDto  # noqa: E501

        :return: The query_dto of this QueryResultDto.  # noqa: E501
        :rtype: QueryDto
        """
        return self._query_dto

    @query_dto.setter
    def query_dto(self, query_dto):
        """Sets the query_dto of this QueryResultDto.

        Associated queryDto  # noqa: E501

        :param query_dto: The query_dto of this QueryResultDto.  # noqa: E501
        :type: QueryDto
        """

        self._query_dto = query_dto

    @property
    def query_id(self):
        """Gets the query_id of this QueryResultDto.  # noqa: E501

        The identifier of the original query  # noqa: E501

        :return: The query_id of this QueryResultDto.  # noqa: E501
        :rtype: str
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """Sets the query_id of this QueryResultDto.

        The identifier of the original query  # noqa: E501

        :param query_id: The query_id of this QueryResultDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                query_id is not None and len(query_id) > 32):
            raise ValueError("Invalid value for `query_id`, length must be less than or equal to `32`")  # noqa: E501
        if (self._configuration.client_side_validation and
                query_id is not None and len(query_id) < 0):
            raise ValueError("Invalid value for `query_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._query_id = query_id

    @property
    def query_parameters(self):
        """Gets the query_parameters of this QueryResultDto.  # noqa: E501

        Contains the parameters available to the query at the time it was run. This allows consumers to go back in time and view the state of the query at runtime. For older query runs, this value may not be populated.  # noqa: E501

        :return: The query_parameters of this QueryResultDto.  # noqa: E501
        :rtype: list[QueryParameterDto]
        """
        return self._query_parameters

    @query_parameters.setter
    def query_parameters(self, query_parameters):
        """Sets the query_parameters of this QueryResultDto.

        Contains the parameters available to the query at the time it was run. This allows consumers to go back in time and view the state of the query at runtime. For older query runs, this value may not be populated.  # noqa: E501

        :param query_parameters: The query_parameters of this QueryResultDto.  # noqa: E501
        :type: list[QueryParameterDto]
        """

        self._query_parameters = query_parameters

    @property
    def query_text(self):
        """Gets the query_text of this QueryResultDto.  # noqa: E501


        :return: The query_text of this QueryResultDto.  # noqa: E501
        :rtype: str
        """
        return self._query_text

    @query_text.setter
    def query_text(self, query_text):
        """Sets the query_text of this QueryResultDto.


        :param query_text: The query_text of this QueryResultDto.  # noqa: E501
        :type: str
        """

        self._query_text = query_text

    @property
    def rows_returned(self):
        """Gets the rows_returned of this QueryResultDto.  # noqa: E501

        Contains the number of rows returned from the query.  # noqa: E501

        :return: The rows_returned of this QueryResultDto.  # noqa: E501
        :rtype: int
        """
        return self._rows_returned

    @rows_returned.setter
    def rows_returned(self, rows_returned):
        """Sets the rows_returned of this QueryResultDto.

        Contains the number of rows returned from the query.  # noqa: E501

        :param rows_returned: The rows_returned of this QueryResultDto.  # noqa: E501
        :type: int
        """

        self._rows_returned = rows_returned

    @property
    def size(self):
        """Gets the size of this QueryResultDto.  # noqa: E501

        Contains the size of the query results in bytes. This can be used to determine how best to download the file and if it's reasonable to open it in a browser or other application. This may be 0 if there are no results or the query results were gathered before we started collecting this metric.  # noqa: E501

        :return: The size of this QueryResultDto.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this QueryResultDto.

        Contains the size of the query results in bytes. This can be used to determine how best to download the file and if it's reasonable to open it in a browser or other application. This may be 0 if there are no results or the query results were gathered before we started collecting this metric.  # noqa: E501

        :param size: The size of this QueryResultDto.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def status(self):
        """Gets the status of this QueryResultDto.  # noqa: E501

        The current status of the query execution  # noqa: E501

        :return: The status of this QueryResultDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this QueryResultDto.

        The current status of the query execution  # noqa: E501

        :param status: The status of this QueryResultDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["NOT_STARTED", "RUNNING", "COMPLETE", "ERROR", "CANCELLED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated(self):
        """Gets the updated of this QueryResultDto.  # noqa: E501

        When the entity was last updated  # noqa: E501

        :return: The updated of this QueryResultDto.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this QueryResultDto.

        When the entity was last updated  # noqa: E501

        :param updated: The updated of this QueryResultDto.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def user_id(self):
        """Gets the user_id of this QueryResultDto.  # noqa: E501

        The owner of the entity  # noqa: E501

        :return: The user_id of this QueryResultDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this QueryResultDto.

        The owner of the entity  # noqa: E501

        :param user_id: The user_id of this QueryResultDto.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def version(self):
        """Gets the version of this QueryResultDto.  # noqa: E501

        The version of the current representation of the entity  # noqa: E501

        :return: The version of this QueryResultDto.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this QueryResultDto.

        The version of the current representation of the entity  # noqa: E501

        :param version: The version of this QueryResultDto.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QueryResultDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryResultDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QueryResultDto):
            return True

        return self.to_dict() != other.to_dict()
