# coding: utf-8

"""
    Cerebral API

    The Wdata Preparation API allow users to import data sets from their source system, tag, organize, manipulate, share, export, and query against the data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: scoutteam@workiva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class QueryParameterDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias': 'str',
        'choices': 'list[object]',
        'id': 'str',
        'label': 'str',
        'mode': 'str',
        'name': 'str',
        'overridable': 'bool',
        'reference': 'object',
        'select_list_id': 'str',
        'type': 'str',
        'value': 'object'
    }

    attribute_map = {
        'alias': 'alias',
        'choices': 'choices',
        'id': 'id',
        'label': 'label',
        'mode': 'mode',
        'name': 'name',
        'overridable': 'overridable',
        'reference': 'reference',
        'select_list_id': 'selectListId',
        'type': 'type',
        'value': 'value'
    }

    def __init__(self, alias=None, choices=None, id=None, label=None, mode=None, name=None, overridable=None, reference=None, select_list_id=None, type=None, value=None, _configuration=None):  # noqa: E501
        """QueryParameterDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._alias = None
        self._choices = None
        self._id = None
        self._label = None
        self._mode = None
        self._name = None
        self._overridable = None
        self._reference = None
        self._select_list_id = None
        self._type = None
        self._value = None
        self.discriminator = None

        if alias is not None:
            self.alias = alias
        if choices is not None:
            self.choices = choices
        if id is not None:
            self.id = id
        if label is not None:
            self.label = label
        if mode is not None:
            self.mode = mode
        if name is not None:
            self.name = name
        if overridable is not None:
            self.overridable = overridable
        if reference is not None:
            self.reference = reference
        if select_list_id is not None:
            self.select_list_id = select_list_id
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value

    @property
    def alias(self):
        """Gets the alias of this QueryParameterDto.  # noqa: E501

        The alias of the query parameter, used to avoid name collisions for nested query parameter references  # noqa: E501

        :return: The alias of this QueryParameterDto.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this QueryParameterDto.

        The alias of the query parameter, used to avoid name collisions for nested query parameter references  # noqa: E501

        :param alias: The alias of this QueryParameterDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                alias is not None and len(alias) > 255):
            raise ValueError("Invalid value for `alias`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                alias is not None and len(alias) < 0):
            raise ValueError("Invalid value for `alias`, length must be greater than or equal to `0`")  # noqa: E501
        if (self._configuration.client_side_validation and
                alias is not None and not re.search(r'\\w+', alias)):  # noqa: E501
            raise ValueError(r"Invalid value for `alias`, must be a follow pattern or equal to `/\\w+/`")  # noqa: E501

        self._alias = alias

    @property
    def choices(self):
        """Gets the choices of this QueryParameterDto.  # noqa: E501

        If the query parameter is of type select, this is a list of possible choices. This  is read only and is for listing and viewing reports to help the user.  # noqa: E501

        :return: The choices of this QueryParameterDto.  # noqa: E501
        :rtype: list[object]
        """
        return self._choices

    @choices.setter
    def choices(self, choices):
        """Sets the choices of this QueryParameterDto.

        If the query parameter is of type select, this is a list of possible choices. This  is read only and is for listing and viewing reports to help the user.  # noqa: E501

        :param choices: The choices of this QueryParameterDto.  # noqa: E501
        :type: list[object]
        """

        self._choices = choices

    @property
    def id(self):
        """Gets the id of this QueryParameterDto.  # noqa: E501

        The entity's unique identifier, set if it is a reference kind.  # noqa: E501

        :return: The id of this QueryParameterDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QueryParameterDto.

        The entity's unique identifier, set if it is a reference kind.  # noqa: E501

        :param id: The id of this QueryParameterDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this QueryParameterDto.  # noqa: E501

        The label for the query parameter  # noqa: E501

        :return: The label of this QueryParameterDto.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this QueryParameterDto.

        The label for the query parameter  # noqa: E501

        :param label: The label of this QueryParameterDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                label is not None and len(label) > 255):
            raise ValueError("Invalid value for `label`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                label is not None and len(label) < 0):
            raise ValueError("Invalid value for `label`, length must be greater than or equal to `0`")  # noqa: E501

        self._label = label

    @property
    def mode(self):
        """Gets the mode of this QueryParameterDto.  # noqa: E501

        The mode of the query parameter  # noqa: E501

        :return: The mode of this QueryParameterDto.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this QueryParameterDto.

        The mode of the query parameter  # noqa: E501

        :param mode: The mode of this QueryParameterDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["scalar", "singleSelect", "multiSelect", "reference"]  # noqa: E501
        if (self._configuration.client_side_validation and
                mode not in allowed_values):
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this QueryParameterDto.  # noqa: E501

        The name of the query parameter  # noqa: E501

        :return: The name of this QueryParameterDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this QueryParameterDto.

        The name of the query parameter  # noqa: E501

        :param name: The name of this QueryParameterDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and not re.search(r'\\w+', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/\\w+/`")  # noqa: E501

        self._name = name

    @property
    def overridable(self):
        """Gets the overridable of this QueryParameterDto.  # noqa: E501

        Whether the parameter can be overridden, defaults to true.  # noqa: E501

        :return: The overridable of this QueryParameterDto.  # noqa: E501
        :rtype: bool
        """
        return self._overridable

    @overridable.setter
    def overridable(self, overridable):
        """Sets the overridable of this QueryParameterDto.

        Whether the parameter can be overridden, defaults to true.  # noqa: E501

        :param overridable: The overridable of this QueryParameterDto.  # noqa: E501
        :type: bool
        """

        self._overridable = overridable

    @property
    def reference(self):
        """Gets the reference of this QueryParameterDto.  # noqa: E501

        The hydrated reference object  # noqa: E501

        :return: The reference of this QueryParameterDto.  # noqa: E501
        :rtype: object
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this QueryParameterDto.

        The hydrated reference object  # noqa: E501

        :param reference: The reference of this QueryParameterDto.  # noqa: E501
        :type: object
        """

        self._reference = reference

    @property
    def select_list_id(self):
        """Gets the select_list_id of this QueryParameterDto.  # noqa: E501

        If mode is select, this must be populated and is a reference to a select list from which choices will be derived.  # noqa: E501

        :return: The select_list_id of this QueryParameterDto.  # noqa: E501
        :rtype: str
        """
        return self._select_list_id

    @select_list_id.setter
    def select_list_id(self, select_list_id):
        """Sets the select_list_id of this QueryParameterDto.

        If mode is select, this must be populated and is a reference to a select list from which choices will be derived.  # noqa: E501

        :param select_list_id: The select_list_id of this QueryParameterDto.  # noqa: E501
        :type: str
        """

        self._select_list_id = select_list_id

    @property
    def type(self):
        """Gets the type of this QueryParameterDto.  # noqa: E501

        The type of the query parameter  # noqa: E501

        :return: The type of this QueryParameterDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this QueryParameterDto.

        The type of the query parameter  # noqa: E501

        :param type: The type of this QueryParameterDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["string", "bytes", "integer", "float", "boolean", "timestamp", "date", "time", "datetime", "global_parameter", "nested_query_parameter"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this QueryParameterDto.  # noqa: E501

        The value of the query parameter  # noqa: E501

        :return: The value of this QueryParameterDto.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this QueryParameterDto.

        The value of the query parameter  # noqa: E501

        :param value: The value of this QueryParameterDto.  # noqa: E501
        :type: object
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QueryParameterDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryParameterDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QueryParameterDto):
            return True

        return self.to_dict() != other.to_dict()
