# coding: utf-8

"""
    Cerebral API

    The Wdata Preparation API allow users to import data sets from their source system, tag, organize, manipulate, share, export, and query against the data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: scoutteam@workiva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ImportErrorDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'int',
        'created': 'datetime',
        'id': 'str',
        'line_number': 'int',
        'message': 'str',
        'updated': 'datetime',
        'user_id': 'str',
        'version': 'int'
    }

    attribute_map = {
        'code': 'code',
        'created': 'created',
        'id': 'id',
        'line_number': 'lineNumber',
        'message': 'message',
        'updated': 'updated',
        'user_id': 'userId',
        'version': 'version'
    }

    def __init__(self, code=None, created=None, id=None, line_number=None, message=None, updated=None, user_id=None, version=None, _configuration=None):  # noqa: E501
        """ImportErrorDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._code = None
        self._created = None
        self._id = None
        self._line_number = None
        self._message = None
        self._updated = None
        self._user_id = None
        self._version = None
        self.discriminator = None

        if code is not None:
            self.code = code
        if created is not None:
            self.created = created
        if id is not None:
            self.id = id
        if line_number is not None:
            self.line_number = line_number
        if message is not None:
            self.message = message
        if updated is not None:
            self.updated = updated
        if user_id is not None:
            self.user_id = user_id
        if version is not None:
            self.version = version

    @property
    def code(self):
        """Gets the code of this ImportErrorDto.  # noqa: E501

        The error code  # noqa: E501

        :return: The code of this ImportErrorDto.  # noqa: E501
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ImportErrorDto.

        The error code  # noqa: E501

        :param code: The code of this ImportErrorDto.  # noqa: E501
        :type: int
        """

        self._code = code

    @property
    def created(self):
        """Gets the created of this ImportErrorDto.  # noqa: E501

        When the entity was created  # noqa: E501

        :return: The created of this ImportErrorDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ImportErrorDto.

        When the entity was created  # noqa: E501

        :param created: The created of this ImportErrorDto.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this ImportErrorDto.  # noqa: E501

        The entity's unique identifier  # noqa: E501

        :return: The id of this ImportErrorDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImportErrorDto.

        The entity's unique identifier  # noqa: E501

        :param id: The id of this ImportErrorDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def line_number(self):
        """Gets the line_number of this ImportErrorDto.  # noqa: E501

        Contains the line number the error occurred on if the error can be reduced to a single line (ie, date formatting error)  # noqa: E501

        :return: The line_number of this ImportErrorDto.  # noqa: E501
        :rtype: int
        """
        return self._line_number

    @line_number.setter
    def line_number(self, line_number):
        """Sets the line_number of this ImportErrorDto.

        Contains the line number the error occurred on if the error can be reduced to a single line (ie, date formatting error)  # noqa: E501

        :param line_number: The line_number of this ImportErrorDto.  # noqa: E501
        :type: int
        """

        self._line_number = line_number

    @property
    def message(self):
        """Gets the message of this ImportErrorDto.  # noqa: E501

        The error message  # noqa: E501

        :return: The message of this ImportErrorDto.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ImportErrorDto.

        The error message  # noqa: E501

        :param message: The message of this ImportErrorDto.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def updated(self):
        """Gets the updated of this ImportErrorDto.  # noqa: E501

        When the entity was last updated  # noqa: E501

        :return: The updated of this ImportErrorDto.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ImportErrorDto.

        When the entity was last updated  # noqa: E501

        :param updated: The updated of this ImportErrorDto.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def user_id(self):
        """Gets the user_id of this ImportErrorDto.  # noqa: E501

        The owner of the entity  # noqa: E501

        :return: The user_id of this ImportErrorDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ImportErrorDto.

        The owner of the entity  # noqa: E501

        :param user_id: The user_id of this ImportErrorDto.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def version(self):
        """Gets the version of this ImportErrorDto.  # noqa: E501

        The version of the current representation of the entity  # noqa: E501

        :return: The version of this ImportErrorDto.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ImportErrorDto.

        The version of the current representation of the entity  # noqa: E501

        :param version: The version of this ImportErrorDto.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportErrorDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportErrorDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportErrorDto):
            return True

        return self.to_dict() != other.to_dict()
