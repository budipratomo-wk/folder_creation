# coding: utf-8

"""
    Cerebral API

    The Wdata Preparation API allow users to import data sets from their source system, tag, organize, manipulate, share, export, and query against the data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: scoutteam@workiva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ExportQueryResultDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'use_flat_key': 'bool'
    }

    attribute_map = {
        'url': 'url',
        'use_flat_key': 'useFlatKey'
    }

    def __init__(self, url=None, use_flat_key=None, _configuration=None):  # noqa: E501
        """ExportQueryResultDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._url = None
        self._use_flat_key = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if use_flat_key is not None:
            self.use_flat_key = use_flat_key

    @property
    def url(self):
        """Gets the url of this ExportQueryResultDto.  # noqa: E501

        URL of the spreadsheet to export to, if present. If not present, a new spreadsheet will be created.  # noqa: E501

        :return: The url of this ExportQueryResultDto.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ExportQueryResultDto.

        URL of the spreadsheet to export to, if present. If not present, a new spreadsheet will be created.  # noqa: E501

        :param url: The url of this ExportQueryResultDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                url is not None and len(url) > 500):
            raise ValueError("Invalid value for `url`, length must be less than or equal to `500`")  # noqa: E501
        if (self._configuration.client_side_validation and
                url is not None and len(url) < 0):
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `0`")  # noqa: E501

        self._url = url

    @property
    def use_flat_key(self):
        """Gets the use_flat_key of this ExportQueryResultDto.  # noqa: E501

        Export flat query results in the context of crosstab queries; Ignored unless true.  # noqa: E501

        :return: The use_flat_key of this ExportQueryResultDto.  # noqa: E501
        :rtype: bool
        """
        return self._use_flat_key

    @use_flat_key.setter
    def use_flat_key(self, use_flat_key):
        """Sets the use_flat_key of this ExportQueryResultDto.

        Export flat query results in the context of crosstab queries; Ignored unless true.  # noqa: E501

        :param use_flat_key: The use_flat_key of this ExportQueryResultDto.  # noqa: E501
        :type: bool
        """

        self._use_flat_key = use_flat_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExportQueryResultDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExportQueryResultDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExportQueryResultDto):
            return True

        return self.to_dict() != other.to_dict()
