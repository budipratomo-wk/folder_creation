# coding: utf-8

"""
    Cerebral API

    The Wdata Preparation API allow users to import data sets from their source system, tag, organize, manipulate, share, export, and query against the data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: scoutteam@workiva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DatetimeDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'candidate': 'str',
        'date_format': 'str'
    }

    attribute_map = {
        'candidate': 'candidate',
        'date_format': 'dateFormat'
    }

    def __init__(self, candidate=None, date_format=None, _configuration=None):  # noqa: E501
        """DatetimeDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._candidate = None
        self._date_format = None
        self.discriminator = None

        self.candidate = candidate
        self.date_format = date_format

    @property
    def candidate(self):
        """Gets the candidate of this DatetimeDto.  # noqa: E501

        Candidate to parse with the provided dateformat.  # noqa: E501

        :return: The candidate of this DatetimeDto.  # noqa: E501
        :rtype: str
        """
        return self._candidate

    @candidate.setter
    def candidate(self, candidate):
        """Sets the candidate of this DatetimeDto.

        Candidate to parse with the provided dateformat.  # noqa: E501

        :param candidate: The candidate of this DatetimeDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and candidate is None:
            raise ValueError("Invalid value for `candidate`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                candidate is not None and len(candidate) > 200):
            raise ValueError("Invalid value for `candidate`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                candidate is not None and len(candidate) < 0):
            raise ValueError("Invalid value for `candidate`, length must be greater than or equal to `0`")  # noqa: E501

        self._candidate = candidate

    @property
    def date_format(self):
        """Gets the date_format of this DatetimeDto.  # noqa: E501

        The dateformat of the candidate to test.  # noqa: E501

        :return: The date_format of this DatetimeDto.  # noqa: E501
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this DatetimeDto.

        The dateformat of the candidate to test.  # noqa: E501

        :param date_format: The date_format of this DatetimeDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and date_format is None:
            raise ValueError("Invalid value for `date_format`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                date_format is not None and len(date_format) > 200):
            raise ValueError("Invalid value for `date_format`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                date_format is not None and len(date_format) < 0):
            raise ValueError("Invalid value for `date_format`, length must be greater than or equal to `0`")  # noqa: E501

        self._date_format = date_format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatetimeDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatetimeDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DatetimeDto):
            return True

        return self.to_dict() != other.to_dict()
