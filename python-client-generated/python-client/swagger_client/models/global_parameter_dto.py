# coding: utf-8

"""
    Cerebral API

    The Wdata Preparation API allow users to import data sets from their source system, tag, organize, manipulate, share, export, and query against the data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: scoutteam@workiva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GlobalParameterDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'choices': 'list[object]',
        'created': 'datetime',
        'database_id': 'str',
        'description': 'str',
        'id': 'str',
        'label': 'str',
        'mode': 'str',
        'name': 'str',
        'overridable': 'bool',
        'select_list_id': 'str',
        'type': 'str',
        'updated': 'datetime',
        'user_id': 'str',
        'value': 'object',
        'version': 'int'
    }

    attribute_map = {
        'choices': 'choices',
        'created': 'created',
        'database_id': 'databaseId',
        'description': 'description',
        'id': 'id',
        'label': 'label',
        'mode': 'mode',
        'name': 'name',
        'overridable': 'overridable',
        'select_list_id': 'selectListId',
        'type': 'type',
        'updated': 'updated',
        'user_id': 'userId',
        'value': 'value',
        'version': 'version'
    }

    def __init__(self, choices=None, created=None, database_id=None, description=None, id=None, label=None, mode=None, name=None, overridable=None, select_list_id=None, type=None, updated=None, user_id=None, value=None, version=None, _configuration=None):  # noqa: E501
        """GlobalParameterDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._choices = None
        self._created = None
        self._database_id = None
        self._description = None
        self._id = None
        self._label = None
        self._mode = None
        self._name = None
        self._overridable = None
        self._select_list_id = None
        self._type = None
        self._updated = None
        self._user_id = None
        self._value = None
        self._version = None
        self.discriminator = None

        if choices is not None:
            self.choices = choices
        if created is not None:
            self.created = created
        if database_id is not None:
            self.database_id = database_id
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if label is not None:
            self.label = label
        if mode is not None:
            self.mode = mode
        if name is not None:
            self.name = name
        if overridable is not None:
            self.overridable = overridable
        if select_list_id is not None:
            self.select_list_id = select_list_id
        if type is not None:
            self.type = type
        if updated is not None:
            self.updated = updated
        if user_id is not None:
            self.user_id = user_id
        if value is not None:
            self.value = value
        if version is not None:
            self.version = version

    @property
    def choices(self):
        """Gets the choices of this GlobalParameterDto.  # noqa: E501

        If the parameter is of type select, this is a list of possible choices. This is read only and is for listing and viewing reports to help the user.  # noqa: E501

        :return: The choices of this GlobalParameterDto.  # noqa: E501
        :rtype: list[object]
        """
        return self._choices

    @choices.setter
    def choices(self, choices):
        """Sets the choices of this GlobalParameterDto.

        If the parameter is of type select, this is a list of possible choices. This is read only and is for listing and viewing reports to help the user.  # noqa: E501

        :param choices: The choices of this GlobalParameterDto.  # noqa: E501
        :type: list[object]
        """

        self._choices = choices

    @property
    def created(self):
        """Gets the created of this GlobalParameterDto.  # noqa: E501

        When the entity was created  # noqa: E501

        :return: The created of this GlobalParameterDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this GlobalParameterDto.

        When the entity was created  # noqa: E501

        :param created: The created of this GlobalParameterDto.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def database_id(self):
        """Gets the database_id of this GlobalParameterDto.  # noqa: E501

        The unique identifier of the database where this parameter can be used to filter query results  # noqa: E501

        :return: The database_id of this GlobalParameterDto.  # noqa: E501
        :rtype: str
        """
        return self._database_id

    @database_id.setter
    def database_id(self, database_id):
        """Sets the database_id of this GlobalParameterDto.

        The unique identifier of the database where this parameter can be used to filter query results  # noqa: E501

        :param database_id: The database_id of this GlobalParameterDto.  # noqa: E501
        :type: str
        """

        self._database_id = database_id

    @property
    def description(self):
        """Gets the description of this GlobalParameterDto.  # noqa: E501

        The description of the parameter  # noqa: E501

        :return: The description of this GlobalParameterDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GlobalParameterDto.

        The description of the parameter  # noqa: E501

        :param description: The description of this GlobalParameterDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 10000):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `10000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def id(self):
        """Gets the id of this GlobalParameterDto.  # noqa: E501

        The entity's unique identifier  # noqa: E501

        :return: The id of this GlobalParameterDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GlobalParameterDto.

        The entity's unique identifier  # noqa: E501

        :param id: The id of this GlobalParameterDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this GlobalParameterDto.  # noqa: E501

        The label for the query parameter  # noqa: E501

        :return: The label of this GlobalParameterDto.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this GlobalParameterDto.

        The label for the query parameter  # noqa: E501

        :param label: The label of this GlobalParameterDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                label is not None and len(label) > 255):
            raise ValueError("Invalid value for `label`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                label is not None and len(label) < 0):
            raise ValueError("Invalid value for `label`, length must be greater than or equal to `0`")  # noqa: E501

        self._label = label

    @property
    def mode(self):
        """Gets the mode of this GlobalParameterDto.  # noqa: E501

        The mode of the parameter  # noqa: E501

        :return: The mode of this GlobalParameterDto.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this GlobalParameterDto.

        The mode of the parameter  # noqa: E501

        :param mode: The mode of this GlobalParameterDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["scalar", "singleSelect", "multiSelect"]  # noqa: E501
        if (self._configuration.client_side_validation and
                mode not in allowed_values):
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this GlobalParameterDto.  # noqa: E501

        The name of the parameter  # noqa: E501

        :return: The name of this GlobalParameterDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GlobalParameterDto.

        The name of the parameter  # noqa: E501

        :param name: The name of this GlobalParameterDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and not re.search(r'\\w+', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/\\w+/`")  # noqa: E501

        self._name = name

    @property
    def overridable(self):
        """Gets the overridable of this GlobalParameterDto.  # noqa: E501

        Denotes if this parameter can be overridden later in the process, either when the query is created or executed.  The default is true; it can be overridden.  # noqa: E501

        :return: The overridable of this GlobalParameterDto.  # noqa: E501
        :rtype: bool
        """
        return self._overridable

    @overridable.setter
    def overridable(self, overridable):
        """Sets the overridable of this GlobalParameterDto.

        Denotes if this parameter can be overridden later in the process, either when the query is created or executed.  The default is true; it can be overridden.  # noqa: E501

        :param overridable: The overridable of this GlobalParameterDto.  # noqa: E501
        :type: bool
        """

        self._overridable = overridable

    @property
    def select_list_id(self):
        """Gets the select_list_id of this GlobalParameterDto.  # noqa: E501

        If mode is select, this must be populated and is a reference to a select list from which choices will be derived.  # noqa: E501

        :return: The select_list_id of this GlobalParameterDto.  # noqa: E501
        :rtype: str
        """
        return self._select_list_id

    @select_list_id.setter
    def select_list_id(self, select_list_id):
        """Sets the select_list_id of this GlobalParameterDto.

        If mode is select, this must be populated and is a reference to a select list from which choices will be derived.  # noqa: E501

        :param select_list_id: The select_list_id of this GlobalParameterDto.  # noqa: E501
        :type: str
        """

        self._select_list_id = select_list_id

    @property
    def type(self):
        """Gets the type of this GlobalParameterDto.  # noqa: E501

        The type of the parameter  # noqa: E501

        :return: The type of this GlobalParameterDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GlobalParameterDto.

        The type of the parameter  # noqa: E501

        :param type: The type of this GlobalParameterDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["string", "bytes", "integer", "float", "boolean", "timestamp", "date", "time", "datetime", "global_parameter", "nested_query_parameter"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated(self):
        """Gets the updated of this GlobalParameterDto.  # noqa: E501

        When the entity was last updated  # noqa: E501

        :return: The updated of this GlobalParameterDto.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this GlobalParameterDto.

        When the entity was last updated  # noqa: E501

        :param updated: The updated of this GlobalParameterDto.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def user_id(self):
        """Gets the user_id of this GlobalParameterDto.  # noqa: E501

        The owner of the entity  # noqa: E501

        :return: The user_id of this GlobalParameterDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this GlobalParameterDto.

        The owner of the entity  # noqa: E501

        :param user_id: The user_id of this GlobalParameterDto.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def value(self):
        """Gets the value of this GlobalParameterDto.  # noqa: E501

        The default value of the parameter  # noqa: E501

        :return: The value of this GlobalParameterDto.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GlobalParameterDto.

        The default value of the parameter  # noqa: E501

        :param value: The value of this GlobalParameterDto.  # noqa: E501
        :type: object
        """

        self._value = value

    @property
    def version(self):
        """Gets the version of this GlobalParameterDto.  # noqa: E501

        The version of the current representation of the entity  # noqa: E501

        :return: The version of this GlobalParameterDto.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GlobalParameterDto.

        The version of the current representation of the entity  # noqa: E501

        :param version: The version of this GlobalParameterDto.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GlobalParameterDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GlobalParameterDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GlobalParameterDto):
            return True

        return self.to_dict() != other.to_dict()
