# coding: utf-8

"""
    Cerebral API

    The Wdata Preparation API allow users to import data sets from their source system, tag, organize, manipulate, share, export, and query against the data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: scoutteam@workiva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PivotViewDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_meta': 'dict(str, object)',
        'created': 'datetime',
        'description': 'str',
        'id': 'str',
        'name': 'str',
        'parent_id': 'str',
        'query_id': 'str',
        'query_result_id': 'str',
        'updated': 'datetime',
        'user_id': 'str',
        'version': 'int'
    }

    attribute_map = {
        'additional_meta': 'additionalMeta',
        'created': 'created',
        'description': 'description',
        'id': 'id',
        'name': 'name',
        'parent_id': 'parentId',
        'query_id': 'queryId',
        'query_result_id': 'queryResultId',
        'updated': 'updated',
        'user_id': 'userId',
        'version': 'version'
    }

    def __init__(self, additional_meta=None, created=None, description=None, id=None, name=None, parent_id=None, query_id=None, query_result_id=None, updated=None, user_id=None, version=None, _configuration=None):  # noqa: E501
        """PivotViewDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._additional_meta = None
        self._created = None
        self._description = None
        self._id = None
        self._name = None
        self._parent_id = None
        self._query_id = None
        self._query_result_id = None
        self._updated = None
        self._user_id = None
        self._version = None
        self.discriminator = None

        if additional_meta is not None:
            self.additional_meta = additional_meta
        if created is not None:
            self.created = created
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        self.name = name
        if parent_id is not None:
            self.parent_id = parent_id
        self.query_id = query_id
        if query_result_id is not None:
            self.query_result_id = query_result_id
        if updated is not None:
            self.updated = updated
        if user_id is not None:
            self.user_id = user_id
        if version is not None:
            self.version = version

    @property
    def additional_meta(self):
        """Gets the additional_meta of this PivotViewDto.  # noqa: E501

        User-defined metadata to attach to the pivot view. This is any arbitrary JSON object and is not required.  # noqa: E501

        :return: The additional_meta of this PivotViewDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._additional_meta

    @additional_meta.setter
    def additional_meta(self, additional_meta):
        """Sets the additional_meta of this PivotViewDto.

        User-defined metadata to attach to the pivot view. This is any arbitrary JSON object and is not required.  # noqa: E501

        :param additional_meta: The additional_meta of this PivotViewDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._additional_meta = additional_meta

    @property
    def created(self):
        """Gets the created of this PivotViewDto.  # noqa: E501

        When the entity was created  # noqa: E501

        :return: The created of this PivotViewDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this PivotViewDto.

        When the entity was created  # noqa: E501

        :param created: The created of this PivotViewDto.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this PivotViewDto.  # noqa: E501

        The description of the pivot view  # noqa: E501

        :return: The description of this PivotViewDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PivotViewDto.

        The description of the pivot view  # noqa: E501

        :param description: The description of this PivotViewDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this PivotViewDto.  # noqa: E501

        The entity's unique identifier  # noqa: E501

        :return: The id of this PivotViewDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PivotViewDto.

        The entity's unique identifier  # noqa: E501

        :param id: The id of this PivotViewDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PivotViewDto.  # noqa: E501

        Name of the pivot view. The maximum size is 255 characters.  # noqa: E501

        :return: The name of this PivotViewDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PivotViewDto.

        Name of the pivot view. The maximum size is 255 characters.  # noqa: E501

        :param name: The name of this PivotViewDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def parent_id(self):
        """Gets the parent_id of this PivotViewDto.  # noqa: E501

        If non-null, indicates the parent of this entity. Must be modified through the folder api.  # noqa: E501

        :return: The parent_id of this PivotViewDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this PivotViewDto.

        If non-null, indicates the parent of this entity. Must be modified through the folder api.  # noqa: E501

        :param parent_id: The parent_id of this PivotViewDto.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def query_id(self):
        """Gets the query_id of this PivotViewDto.  # noqa: E501

        The query to associate with this pivot view. This value is required and cannot be updated after the pivot is created. Any attempt to update the query ID is ignored.  # noqa: E501

        :return: The query_id of this PivotViewDto.  # noqa: E501
        :rtype: str
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """Sets the query_id of this PivotViewDto.

        The query to associate with this pivot view. This value is required and cannot be updated after the pivot is created. Any attempt to update the query ID is ignored.  # noqa: E501

        :param query_id: The query_id of this PivotViewDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and query_id is None:
            raise ValueError("Invalid value for `query_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                query_id is not None and not re.search(r'[a-f0-9]{12}4[a-f0-9]{3}[89aAbB][a-f0-9]{15}', query_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `query_id`, must be a follow pattern or equal to `/[a-f0-9]{12}4[a-f0-9]{3}[89aAbB][a-f0-9]{15}/`")  # noqa: E501

        self._query_id = query_id

    @property
    def query_result_id(self):
        """Gets the query_result_id of this PivotViewDto.  # noqa: E501

        An optional query result id to associate with this pivot view. If associated, saving a pivot view will cause an existence check on the related query result.  This value is not required. The query id on the query result must match this pivot's query ID.  # noqa: E501

        :return: The query_result_id of this PivotViewDto.  # noqa: E501
        :rtype: str
        """
        return self._query_result_id

    @query_result_id.setter
    def query_result_id(self, query_result_id):
        """Sets the query_result_id of this PivotViewDto.

        An optional query result id to associate with this pivot view. If associated, saving a pivot view will cause an existence check on the related query result.  This value is not required. The query id on the query result must match this pivot's query ID.  # noqa: E501

        :param query_result_id: The query_result_id of this PivotViewDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                query_result_id is not None and not re.search(r'[a-f0-9]{12}4[a-f0-9]{3}[89aAbB][a-f0-9]{15}', query_result_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `query_result_id`, must be a follow pattern or equal to `/[a-f0-9]{12}4[a-f0-9]{3}[89aAbB][a-f0-9]{15}/`")  # noqa: E501

        self._query_result_id = query_result_id

    @property
    def updated(self):
        """Gets the updated of this PivotViewDto.  # noqa: E501

        When the entity was last updated  # noqa: E501

        :return: The updated of this PivotViewDto.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this PivotViewDto.

        When the entity was last updated  # noqa: E501

        :param updated: The updated of this PivotViewDto.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def user_id(self):
        """Gets the user_id of this PivotViewDto.  # noqa: E501

        The owner of the entity  # noqa: E501

        :return: The user_id of this PivotViewDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PivotViewDto.

        The owner of the entity  # noqa: E501

        :param user_id: The user_id of this PivotViewDto.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def version(self):
        """Gets the version of this PivotViewDto.  # noqa: E501

        The version of the current representation of the entity  # noqa: E501

        :return: The version of this PivotViewDto.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PivotViewDto.

        The version of the current representation of the entity  # noqa: E501

        :param version: The version of this PivotViewDto.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PivotViewDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PivotViewDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PivotViewDto):
            return True

        return self.to_dict() != other.to_dict()
